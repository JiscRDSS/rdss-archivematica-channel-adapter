// Code generated by go-bindata.
// sources:
// message-api-spec/schemas/enumeration.json
// message-api-spec/schemas/intellectual_asset.json
// message-api-spec/schemas/material_asset.json
// message-api-spec/schemas/research_object.json
// message-api-spec/schemas/types.json
// message-api-spec/messages/body/metadata/create/README.md
// message-api-spec/messages/body/metadata/create/request.json
// message-api-spec/messages/body/metadata/create/request_schema.json
// message-api-spec/messages/body/metadata/delete/README.md
// message-api-spec/messages/body/metadata/delete/request.json
// message-api-spec/messages/body/metadata/delete/request_schema.json
// message-api-spec/messages/body/metadata/read/README.md
// message-api-spec/messages/body/metadata/read/request.json
// message-api-spec/messages/body/metadata/read/request_schema.json
// message-api-spec/messages/body/metadata/read/response.json
// message-api-spec/messages/body/metadata/read/response_schema.json
// message-api-spec/messages/body/metadata/update/README.md
// message-api-spec/messages/body/metadata/update/request.json
// message-api-spec/messages/body/metadata/update/request_schema.json
// message-api-spec/messages/body/vocabulary/patch/README.md
// message-api-spec/messages/body/vocabulary/patch/request.json
// message-api-spec/messages/body/vocabulary/patch/request_schema.json
// message-api-spec/messages/body/vocabulary/read/README.md
// message-api-spec/messages/body/vocabulary/read/request.json
// message-api-spec/messages/body/vocabulary/read/request_schema.json
// message-api-spec/messages/body/vocabulary/read/response.json
// message-api-spec/messages/body/vocabulary/read/response_schema.json
// message-api-spec/messages/header/header.json
// message-api-spec/messages/header/header_schema.json
// message-api-spec/messages/message.json
// message-api-spec/messages/message_schema.json
// DO NOT EDIT!

package specdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasEnumerationJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x4f\x6f\x23\xbb\x0d\xbf\xef\xa7\x30\xdc\x1e\xfb\xe2\xfe\x7b\x3d\xe4\x96\x4d\x36\x5d\xa3\x9b\xd8\xb0\x9d\x7d\x05\x8a\x1e\x68\x89\x33\xc3\x58\x23\xa9\x94\x64\xc7\x28\xde\x77\x2f\x34\xe3\x04\x43\x8d\xb3\x4e\xdf\x21\x08\xf4\xa3\xc4\x3f\x3f\x51\x24\xc7\xff\xfd\x34\x99\x4c\x49\x4f\xaf\x27\xd3\x26\x46\x1f\xae\x67\xb3\xc3\xe1\x70\xf5\x4c\x41\x5d\x81\xba\x4a\xbb\x19\xeb\x10\x66\x41\x35\xd8\xc2\x0c\x6d\x6a\x91\x21\x92\xb3\x57\xcf\xc1\xd9\xd9\xef\xa6\x7f\xc8\x0a\x7e\xdf\xcb\x5f\xb5\x5c\xcf\x66\x59\xfa\x53\x8f\x5e\x39\xae\x67\x9a\xa1\x8a\x3f\xfd\xf1\xaf\x27\x4d\xa7\x73\x1a\x2b\xb2\x94\xd5\x85\xe9\xf5\x24\xfb\x32\x99\x4c\x41\x29\x0c\x61\x73\xf4\xf8\x86\x4d\x26\xd3\x6c\x7a\x7a\x3d\xf9\xd7\x69\x3d\x99\x4c\x9d\x47\xdb\xa9\x39\xad\x03\x54\x58\x27\x60\x8d\x7a\x08\x2b\x67\x23\x3b\x63\x24\xca\x18\x22\x93\x8a\xc5\x5e\xe3\x02\xea\xe9\x09\xf8\x77\xf7\xff\xd7\x5e\x3e\x55\x0d\xaa\x5d\x48\xed\x65\xc7\x5a\xfd\xb3\xf0\xab\x81\x3f\xff\xfc\xb7\xf3\x4a\x35\x44\xbc\xac\x30\x33\xe2\x0b\x57\xc1\x7b\x76\xfb\x02\xdb\x03\x19\xd8\x1a\x94\xf1\xfb\x23\x53\xdd\x94\xa1\x66\x4a\x46\xf1\x33\x42\x01\x51\x08\x49\x22\xad\xd3\x54\x91\xc4\xbc\x0b\xc5\x39\x9f\xb6\x86\x42\xf3\x1e\x9b\xa8\xd3\x12\x39\x38\xbb\x56\xce\xa3\xbe\xa9\x2a\x32\xd4\x25\xd6\x8f\xa9\x08\x31\x69\xb4\x51\xf0\x1b\xa1\xaa\x86\x40\x05\x2a\x99\x78\x1c\x42\xd8\x7a\xe3\x8e\x28\x88\x69\xb1\xdd\x22\x0b\xfe\x4e\x5e\x88\x6d\x60\x52\x3b\x5c\x1b\xda\x32\xf0\xf1\x17\x30\xbb\xb9\x3d\x1f\x5c\x45\x06\x9f\xc2\xa5\xf4\x65\xaa\xc9\x82\xb9\x27\x79\x5f\xb1\x49\xed\xd6\x02\x99\x79\x0b\xb5\x90\xe0\x4b\x64\xc8\x57\xb6\xc1\x17\xc1\x80\x67\x0c\xc8\xfb\x8e\xbe\x07\x08\x11\xb9\x54\x4a\x36\x22\xb7\xa8\x73\x70\xa5\x2c\x1f\x25\x35\x82\x23\x83\x0d\x8a\xc9\xc7\xf3\x41\x52\xbe\x87\x9c\x08\x7c\x39\x81\x6f\x56\xff\x10\x94\xf2\x3f\x69\x3f\x04\xb6\xb4\x55\x4e\x0b\xf3\x77\x8b\xf9\x70\xf9\xe5\xe6\xf1\x4f\x7f\x11\xc0\x7c\xbd\x7e\x1c\x02\x5f\xc1\x6a\x19\xc1\x7c\xfd\xf9\x51\xae\xd7\xc5\x7a\x73\x3b\x5c\x7f\x2b\x37\x7c\x5b\xcf\xef\x86\xeb\xe5\x43\xb1\x7e\x2a\xd7\xab\x6f\xc3\xf5\xda\x25\x56\x28\xf7\x3c\x2d\x85\xcd\xe2\xc4\xd3\xea\xf1\x3c\xdb\x6e\xfb\x8c\x2a\x7e\x07\x93\x2e\x50\x6d\x1d\xb7\x60\x86\x3a\x1b\xaa\x9b\xe1\x7a\x8f\x7c\xfc\x9a\xb1\xf3\x86\xb8\x06\x4b\xa1\xcb\xa5\x95\x33\x17\xac\x55\xc9\x6a\xf9\x86\x1a\x17\x22\xd9\x7a\x6e\x43\xa4\x98\xba\x07\x3d\x2c\xbb\xb9\x10\x85\xaf\xce\x14\xa7\x82\x77\x36\x38\x3e\x57\x40\x58\x96\xed\x9a\x42\xec\x3b\xd0\x4d\x8d\x56\x1d\xdf\x95\xa6\xd8\x38\x26\x59\x06\x74\x16\xd3\x36\x45\x69\x0a\xf4\xde\x29\x90\xba\xa0\x3b\x7f\x99\xa3\xcb\xc9\xaf\x1a\x28\xfd\x50\xae\x6d\x91\x15\xc9\x8b\x1a\x93\x59\x25\x8e\x0d\xf2\x17\x9d\x14\x94\x54\xd6\x6e\x8f\x6c\xdb\xa2\x18\x36\x08\x26\x36\x12\x61\x8a\x45\x25\xc9\x29\xf1\x8e\x5a\x17\x0b\xca\x3d\xbb\x0a\x43\x20\x67\xc1\x7c\x76\xba\x20\x3c\x20\xb0\x12\xf6\x82\x6a\x9c\x13\x71\x85\x1d\x19\x13\xe4\x7b\x37\x86\x6c\x5d\x5c\x8d\x37\x70\x3c\x4f\xb8\xef\x5a\xc5\xfc\xff\xa8\x38\x8b\xd5\xad\x7c\x77\xf7\x8b\x9b\xfb\xe1\x7a\x73\xa0\x18\x65\xa4\x6f\x3d\x69\x03\x5c\x63\x44\x2d\x35\xbc\x89\x97\x4c\x56\x91\x37\xf8\x08\x2d\xfe\xc8\xe1\xcb\xef\x07\x74\x4b\xb6\xcf\x59\x99\x92\x79\x6a\x01\x15\x7b\x83\x82\x27\x88\x70\x63\xc1\x1c\x83\x74\x3e\xe3\xb7\x7d\x4f\x77\x63\x41\xee\xeb\x63\xf8\x01\x2c\xd4\x25\x07\x54\x6c\x24\xbb\xc7\x10\xa9\x2e\x15\x78\x76\x3a\xa9\x51\xae\xe4\x32\xf5\x0d\xa1\x48\xe4\xb3\x8f\xf9\xb4\xfb\x61\xd4\x87\x19\x4d\x1e\x43\xc6\xc1\xbf\xe6\x5b\xb9\xfd\x15\xfd\x3b\xbb\xe4\x7f\x63\xbd\x09\xc9\xe7\x46\x58\xa0\xa3\xe7\x70\xaa\x0b\x43\x26\xd1\xbb\x40\xb9\xe8\x3d\xe5\x3b\x39\x9f\x0f\x83\x0e\xfd\x65\x8f\x36\x7e\xa0\x6c\x80\x8f\x89\x8b\x51\xae\xcd\x8a\x42\xf1\x64\xbb\xa9\xad\xc0\x34\xf6\x63\xf4\x08\x7e\x47\x87\x46\xc5\x47\x3f\xd6\x62\x70\x84\x51\x4d\x11\xcc\x9a\x6a\x0b\xd9\xc1\xef\x60\x48\x8f\xed\xbb\x83\x35\x0e\xc4\x48\x58\xd1\x0b\xc5\xe3\x6d\x9e\xa3\x65\x82\xd5\x39\xc1\xe4\xf9\x16\x43\x80\x1a\xef\x28\xcb\x6e\xc1\xa8\x64\x46\x36\x5a\xaa\x79\x04\xf6\xfd\xef\x54\x9c\x65\x96\x78\x43\xe3\x7a\x97\xbc\x2e\x06\xbe\xfd\xd9\x80\xf6\xc4\x29\xf4\xbe\x9f\xbd\xe1\x2e\x67\x3f\xd6\x0f\x28\x62\x90\x23\xf6\x2d\x45\xd4\x9f\x8f\x12\x5c\x27\xef\x0d\xe6\x02\xbf\x71\xef\x49\xca\x53\xb9\x6c\x90\x4d\x23\xfd\x27\xb8\xd8\xdd\x40\x78\xc0\x08\xb9\x14\xc8\xfd\xaf\xe8\x7d\x51\x0a\xc2\x23\x1e\xbe\x23\xe7\xe4\x59\x54\x52\xb2\x64\xdc\x93\x4b\xe1\x3d\x31\x70\x94\x58\x03\x1d\x28\xb7\xad\xb0\x42\x46\xab\x4a\x4f\xf9\x15\x2f\x02\xbb\x73\x2a\x9d\xe3\x41\x9f\xf0\x11\x0f\xad\x27\x33\x26\xad\x43\x8b\xbd\xdf\x81\x09\x6c\xbc\x77\xdc\x96\xc1\x2c\x5e\x47\xf7\x33\xb2\xbe\x49\x29\x30\xe5\xa5\xad\x70\x4f\x78\x18\x07\x96\xd1\x32\x2a\x64\xda\xa3\xbe\x67\xd7\x16\x17\xdf\x0d\x94\xa5\xc9\xdb\x3c\x4d\xd8\xb8\xb0\x05\xbd\x27\xbc\x74\xc3\x9b\xa3\xf4\xad\x81\x1e\x15\x1d\x1a\x02\xea\x85\xbd\x2b\x52\xa3\xdb\xda\x15\xe7\x07\x88\xc8\xc5\x00\x43\xe1\x73\x7f\x6c\x04\x52\x28\x52\x89\xf1\x3f\x89\xb8\xe4\x7c\xd5\xa3\xe3\x34\x5d\x02\x8f\x22\xe9\xb1\x45\xf5\xde\x7b\x0c\x1d\x59\x1f\xf8\xba\xe6\x78\x87\x81\x6a\x3b\x8f\xd8\xca\xcf\x94\x48\x4a\x7e\x52\x40\xd2\x24\xb8\xdb\x3a\xb7\x2b\xd7\x6b\x54\x65\xf5\x50\xce\x9e\x12\xf8\x17\xc7\xbb\xd0\x38\x5f\x1a\xcb\xcf\x2d\xa0\x08\x11\x5f\xa0\x5d\x82\x97\xfd\x87\xca\xaf\xc2\x67\x97\xd8\xca\x7b\x30\x08\x6c\xc9\xd6\x8b\xee\xa3\x41\x94\x4c\xb7\xcf\xc3\x79\xa9\xa3\x4d\x81\x54\x7e\x1c\x5d\x23\xbb\x34\x10\x42\x2c\xee\xc2\x23\x57\xb9\xec\x5a\x85\xb2\xbf\xa3\x67\x92\x5b\x19\xbd\xe3\x38\x7e\x01\xa2\x13\x37\xee\xf0\xe5\xa5\xa1\xed\xc8\x97\xe0\xaa\x78\x00\xd9\x14\x63\xf1\x31\x1c\x1b\x0c\x14\xee\x28\x04\xe4\x38\x2e\xf7\x76\x67\xdd\x41\x40\x07\xdc\x06\x92\x2d\xe0\xe0\x78\x57\x19\x27\xbc\xca\xa9\xe9\xbb\xf7\x74\x36\xdf\x42\x74\x0c\x35\xae\x23\xc4\x14\x2e\x7c\xf9\x5b\x43\x56\xd8\xb3\x08\x5c\x62\xae\xaa\x3a\xe8\x47\xd6\x2e\x27\xf7\x5a\x7c\x34\x7f\xdd\x6c\x96\xe7\x15\x26\x9f\xbb\xf5\x47\xbc\x7f\xdb\xc9\xc5\x2f\x3e\xbd\x20\x67\x91\x41\x49\x67\x2f\xb9\xd9\xba\xee\x88\xb4\xff\x29\xff\xfd\xfa\xe9\x7f\x01\x00\x00\xff\xff\xe2\x4a\x8c\x66\x88\x14\x00\x00")

func schemasEnumerationJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasEnumerationJson,
		"schemas/enumeration.json",
	)
}

func schemasEnumerationJson() (*asset, error) {
	bytes, err := schemasEnumerationJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/enumeration.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasIntellectual_assetJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x08\x6a\x8f\x59\xab\x69\x0b\xb4\xc8\xad\x70\x92\x76\x81\xa4\x08\x36\x9b\x5e\x8a\x62\x31\x96\xc6\x36\xb3\x12\xa9\x92\xa3\xb8\x69\x91\xff\x5e\x88\x92\x63\xbd\x28\xc9\xa2\x2d\xf9\xb0\x87\x48\xe2\xcc\x37\x8f\x6f\x1e\xf4\xfe\x37\x73\x1c\x97\x05\xee\x95\xe3\x6e\x88\x62\x75\xe5\x79\xdb\xed\x76\xfe\xcc\x94\x3f\x07\x7f\x9e\x7c\xf5\x64\xa0\x94\xa7\xfc\x0d\x46\xe0\x31\x4e\x18\x86\xe8\x53\x02\xe1\x17\x50\x0a\x69\xfe\xac\x04\xf7\xbe\x71\x2f\x52\x39\xdf\x66\x9f\xed\x84\x5d\x79\x5e\xfa\xf6\x43\xf6\x74\x2e\xe4\xda\x0b\x24\xac\xe8\xc3\x77\x3f\xe6\x02\xf3\x73\x01\xae\x18\x67\xc4\x04\x57\xee\x95\x93\x42\x72\x1c\x77\xc5\x42\x7c\xff\xcb\x71\x5c\x7a\x8d\xd3\xbf\x5d\xb1\x7c\x46\x9f\xf4\x41\xfd\x3c\x96\x22\x46\x49\x0c\x55\xe1\xeb\xfc\xfc\x53\xa2\x4d\xdb\x3f\x4d\x41\x4a\x5c\xf5\x34\x37\x55\xa9\x72\x0b\xbd\x02\x48\x2f\x49\xe5\xbe\x0b\x7d\xbb\x28\x6b\xfd\x18\x20\x27\xb6\x62\x28\x4f\xa1\x9b\x0b\x7e\x13\xc5\xf4\xfa\x48\x92\xf1\xb5\x19\xc5\xef\x10\xe1\x94\xfa\x1f\xd9\xbf\x35\xfd\xbb\x18\xa6\x79\xb4\x46\x69\x3e\x7c\x07\x4b\x0c\xa7\x44\x7f\x0d\x84\x0b\x89\x40\x68\x93\x40\x12\x15\x82\xf4\x37\x5f\xb2\xa4\x6d\x02\x14\x00\xa1\x19\xc6\x27\xb6\xde\x90\x3a\x2d\x02\x99\xe9\x30\x62\x58\x6c\xd0\xff\xaa\x92\xc8\x14\x4c\x90\x12\x5e\xdd\x8b\xe2\x2b\x46\x18\x55\x51\x17\x70\x97\xf5\xfb\x3b\xf9\x85\x8f\xdf\x4a\xe2\x22\xc6\x3f\xe6\x12\x2f\x8d\x30\x6f\x85\x8c\x80\x3e\x67\xa0\x26\xcb\x9b\x85\x88\x62\xa1\xf4\xa1\x3b\x7c\x99\x36\x87\x7f\x03\x75\xcf\x22\x6c\x72\xc9\x2e\x76\x4b\x21\x42\x04\xde\xce\x83\x7b\x11\xa4\xd5\xac\x46\x84\xe1\x09\x70\x0a\xea\x0c\x4a\x9a\x87\x86\x06\x71\x52\xb3\x0e\x0e\xaa\xe3\xbc\x19\xd1\x3f\xa9\xce\x0a\x5b\x75\x09\x8b\x34\x91\x2f\xcb\xcf\xe1\x9f\xfc\xf9\x4f\x66\x4f\xa5\x01\x91\x2f\x90\xa2\xbd\x79\x41\x4e\xa7\x2a\x07\x71\x4d\x91\x5d\x88\x9f\xe2\x50\x40\xf0\x48\x40\x49\xad\x90\x5a\x7a\xeb\x07\x73\xf3\x23\x21\x61\x8d\x23\x6b\xbd\x03\x45\xd7\x62\xcb\x53\x83\xa7\xed\x5b\x9f\xd1\xdf\x70\xe6\x43\xf8\x0b\x91\x64\xcb\x84\xd0\xe8\x85\xf3\xa7\x59\x1e\xcc\x3b\xe1\xeb\xa4\x34\x19\xa2\x32\x91\x25\x4b\x56\xba\x29\xa5\x6f\x13\xc9\x5a\x66\xa5\x4c\xc3\x43\x08\x94\x9e\x30\x45\xae\x6c\x8a\xaa\x1c\x9a\x55\x2d\x79\xd7\xe2\x4a\xfc\x3b\x61\x52\xa7\xc4\x9f\x0d\x13\xb2\x79\x7e\x6d\x9a\x29\x9b\xe6\x3c\xd3\xc8\xd0\xd5\x1d\xdb\xba\x4d\x43\xb1\xeb\xac\x49\x6d\xdc\x6f\xa5\x68\x47\xc8\x3b\xe2\x95\xbf\xfd\xeb\xdd\xe1\x10\x04\xda\x4a\x08\x1f\x8a\xeb\xc9\x0a\x42\x85\xb3\x42\x6c\xdc\x6a\x10\x2d\x16\x9e\x8a\xa8\xf1\x77\x9f\x0a\x80\x29\x17\x90\x0a\x94\xb6\x11\x68\x60\x15\xfe\xbe\x8f\xde\x85\x50\xb5\x3e\x79\x52\x17\xf4\x64\x7e\x53\xaa\x74\x04\xb2\xc3\xb9\x1d\x3e\x18\x4e\x10\xbf\xbe\x7d\x1c\xcc\x8c\x9d\x8c\xf1\x29\xb1\xd3\x3c\x5a\x02\xee\x14\xfe\x01\x61\x32\x2e\xfb\x7a\xa6\x5e\x29\x16\x26\x4f\x19\x0d\x1a\x9e\x47\xf5\xb1\xd2\x22\xa1\x6a\xc2\xc6\x77\xf7\x45\x0b\x9a\x13\x64\xdb\xe5\xcf\xfd\x54\x5f\x23\x01\x1b\x77\xeb\xed\x99\x78\x86\x98\x75\xfa\xd1\x22\xe5\x50\x46\x4c\xa9\xf2\xc8\x78\x70\xae\x49\x04\xe3\x8a\xda\xba\xbe\x6f\x25\xa3\x61\x8b\xbf\x2f\x38\x49\x51\x8b\x62\xaf\xb3\x10\xc7\xc8\x0f\x00\xdc\x33\x7a\xda\x0b\x35\xe3\x1a\x30\xd7\xa1\x0c\x0f\xa0\x9e\x31\x8f\x12\xc4\xc6\x54\x70\x5a\x96\xe0\xfd\xf7\xc6\xa5\xa1\x9f\x24\xfd\xe5\xe1\x64\xd9\xeb\xaf\x6a\x1d\xee\xce\xb5\x14\x49\x6c\xe3\x45\x2d\x60\xfc\x26\xae\xd5\x4e\x39\xcd\x6a\x00\xd3\xff\xaa\xa0\x61\xdc\x9a\x38\xe1\x1c\xf3\x12\xa8\xc2\xbc\xc2\x91\x03\x6f\x80\x34\xe6\x7b\x8c\x96\x28\xc7\xbd\x81\x88\x80\x50\xb2\xca\xcf\x64\x55\x8e\xab\x8a\x6d\x07\xf3\x74\xcf\x88\xc6\x7c\x6d\xc9\xa1\x8e\xb8\xda\xb0\x1c\xec\x86\x2b\x2d\x60\x0a\x96\x03\xa7\x73\x20\x19\x70\xba\x4d\x78\x60\x05\xa1\xc7\x05\x9e\x90\x6b\xe0\x4c\xe9\x69\xe7\x93\x08\x0d\x97\x79\x1a\xce\x23\x81\xb4\xd9\x63\xad\xae\x13\x35\x82\x9b\xfa\x48\x31\xaa\xfe\xb3\x5d\xa7\xf6\x64\x69\x49\x65\x43\x7a\x35\x87\xb9\xc9\xf5\x36\x6b\x97\xd0\xac\xb7\x5a\xb6\xb4\x88\xf1\x2b\x42\xae\xd8\x5c\x13\xce\xee\x0a\xfb\xb0\xde\x98\xdb\x37\xe5\x64\x93\x43\xb8\x46\xe5\x4b\x16\x37\xdd\xae\x8f\x8c\x64\x21\xf4\xff\x6f\x39\xea\x68\x73\x9c\x0a\xe5\xef\x91\x59\x87\xfc\xd7\xca\x24\x6e\x69\x60\x19\x68\x36\xe6\x1f\x01\x23\x9c\xee\x47\xc6\x6c\x48\x69\x1e\xbd\xea\x50\x26\xed\x7f\x39\x86\xb1\x3b\x60\xdf\x45\xb1\x50\x9c\x5b\x4b\xa7\xa1\xee\xb4\xd7\x82\x56\x7e\x9a\xd2\xda\x14\xbf\x66\x9f\x0e\x68\x6d\xb3\xf4\xdf\xdb\xec\xff\x00\x00\x00\xff\xff\xe5\xb5\x0c\x27\x3b\x27\x00\x00")

func schemasIntellectual_assetJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasIntellectual_assetJson,
		"schemas/intellectual_asset.json",
	)
}

func schemasIntellectual_assetJson() (*asset, error) {
	bytes, err := schemasIntellectual_assetJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/intellectual_asset.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasMaterial_assetJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\x13\x31\x10\xbd\xe7\x57\xac\x4c\x8f\x6d\x4c\x2b\x2a\xa1\xdc\x2a\x54\xa1\x20\x51\x90\xda\x72\x41\x08\xb9\xf1\x6c\x32\x61\x6d\x6f\xfd\x41\x88\x50\xfe\x3b\x72\x36\x49\xbd\x5f\xde\x2a\x4b\x93\x1e\x72\xf1\xac\xdf\xbc\x99\x79\x9e\x99\xfc\x1d\x24\x09\x41\x4e\x46\x09\x99\x59\x9b\x9b\x11\xa5\x8b\xc5\x62\x38\x47\x33\x19\xb2\xc9\xd0\xfd\xa2\x9a\x1b\x43\xcd\x64\x06\x82\x51\xc1\x2c\x68\x64\xd9\x4f\x66\x0c\xd8\xe1\xdc\x28\x49\xdf\x90\x53\x8f\x71\x52\x7c\xb2\x05\x1a\x51\xea\xad\x67\xc5\xe9\x50\xe9\x29\xe5\x9a\xa5\xf6\xec\xed\xbb\x0d\xd8\xe6\x1e\x87\x14\x25\x5a\x54\xd2\x90\x51\xe2\xe9\x24\x09\x51\x7a\xca\x24\x1a\xe6\x8f\x77\xa7\x49\x42\xec\x32\x07\xef\x41\x3d\xcc\x61\x62\xd7\x00\xeb\xf3\x5c\xab\x1c\xb4\x45\x30\xc1\xd7\x15\x9c\x4f\x68\x26\x63\x5e\xb2\x07\x88\x28\x2d\x4c\x41\x93\x9d\x6d\x75\xda\x0c\x73\xc3\x04\x54\x41\x4e\x34\xa4\xcf\xcc\xa0\xf7\x67\x36\x89\xa3\x41\xec\x54\x2a\x79\x2d\x72\xbb\xbc\xb5\x1a\xe5\xb4\x9b\xc7\x5d\x41\x3c\x1a\xcc\x69\x68\x14\x28\x51\x38\x41\x46\xc9\x79\xf9\x9c\xfd\xd9\x9e\x5f\x76\x7a\xbd\xe2\x5c\x83\x31\x07\x4d\xc0\xa0\x42\x89\x68\x78\x74\xa8\xc1\xd7\xf2\x7b\xb4\xd6\xb1\x12\xc6\xd2\xda\x11\xfc\xc6\xfa\x63\x47\x88\x71\xbe\x0e\x82\x65\x5f\x43\x21\xa6\x2c\x33\x30\x08\xb8\x93\x1c\xb4\xe9\xa7\xe8\x02\xe1\xde\x61\x4d\xc9\xff\xa3\x06\xce\xe3\x36\x8a\xa0\xf0\x3b\xe6\x20\x2d\xa6\x08\xba\x4d\x7a\x4c\x6b\xb6\x2c\x0b\x0f\x2d\x88\xaa\x62\x02\xbe\x65\x06\x35\x3f\xc1\xa5\x55\x55\xcf\xe3\x0d\xf2\x79\x84\xf2\xb5\xb4\x68\x33\x10\x20\x6d\x7f\xce\xb1\x07\xd6\xfe\xc4\x4a\x8f\xec\xe2\xe2\x59\x11\x95\x0c\x4e\xe2\xa3\x83\xad\xcd\x6a\x07\x91\x80\xaf\xd2\x14\x33\xac\xb6\xce\xe3\x05\xfc\xfe\x85\xe3\xfd\x88\xbf\xe1\xa8\x5d\xb9\xa0\xf1\xa1\x96\xed\xc3\xfa\xbf\x3d\xb2\xff\x3b\xc8\x20\x9f\x29\x09\x37\x4e\x3c\xd4\xfb\xc3\x61\xc9\x7c\x66\x98\xb5\x89\xdf\x14\xb7\x4b\x82\x4b\x95\x16\xcc\xf7\x07\x02\xc2\x5f\x8d\x40\x7f\x09\x06\xc2\xbd\xc4\x5a\x53\x79\x0d\xa3\x30\x18\x12\xb1\x16\x1e\xed\x95\xd1\xbe\x12\x79\x84\x4d\x0f\xa3\x49\xac\x9d\x02\x6a\x2e\x6a\x77\x3d\xf6\x9f\xce\xaa\xbd\xb4\xbd\x36\x4f\x8f\x75\xf8\x89\x5d\x65\xf0\x5a\x16\xd7\x36\x0e\x65\xd4\xd2\x8d\x5e\xbb\xe0\x2e\xfb\x5d\xb9\x69\xe3\xdb\x77\xdd\x6b\x5c\x9a\xf6\x5c\xfc\x9e\xb0\xbe\xb1\xcc\x1d\x79\xe4\x3d\x91\x79\x81\x3f\x23\x97\x7b\x76\xbd\x6a\x86\xba\x58\xef\x51\xdd\x81\xff\xad\x06\xff\x02\x00\x00\xff\xff\x38\xa9\xa5\xbb\x3b\x0f\x00\x00")

func schemasMaterial_assetJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasMaterial_assetJson,
		"schemas/material_asset.json",
	)
}

func schemasMaterial_assetJson() (*asset, error) {
	bytes, err := schemasMaterial_assetJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/material_asset.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasResearch_objectJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\x08\xda\x1c\x1d\x2b\x1f\xbb\xd8\x85\xaf\xdb\x14\x0d\x0a\x34\x81\x93\xf6\x52\x14\x01\x2b\x8d\x6d\xa6\x92\xa8\x0e\xa9\xb8\x46\xe1\xff\x5e\xd0\x92\x4d\x49\xa6\x18\x53\x96\x6c\xe5\x10\x20\xd6\xc7\x9b\x37\xf3\x38\x9c\xd1\xf0\xf7\xc0\x71\x5c\x1a\xb8\x63\xc7\x9d\x0b\x91\xf0\xb1\xe7\x2d\x16\x8b\xd1\x33\xe5\xfe\x88\xf8\xa3\xf4\x87\x87\x01\xe7\x1e\xf7\xe7\x10\x11\x0f\x81\x03\x41\x7f\xfe\xc4\xbe\x3f\x83\x2f\x46\xcf\x9c\xc5\xde\x5f\xee\x50\x82\x9c\x65\xcf\x6c\x90\xc6\x9e\x27\xef\x9e\x67\x57\x47\x0c\x67\x5e\x80\x64\x2a\xce\x2f\xfe\xce\xd1\xf2\xf7\x02\x98\xd2\x98\x0a\xca\x62\xee\x8e\x1d\xc9\xc7\x71\xdc\x0c\x7f\xfb\xdb\x71\x5c\xb1\x4c\x40\x62\xe7\x77\x86\x9b\xeb\x09\xb2\x04\x50\x50\xe0\x85\xa7\xb7\x08\x9f\xd3\xb5\x6f\xea\xba\x24\x8a\x30\xdd\xd3\x5f\x69\x94\xe7\x5e\x7a\x05\xa2\x5e\x2a\x71\xb7\xa0\xab\x61\xd5\xee\x23\x15\x21\x74\x61\x38\x66\xf1\x4d\x94\x88\xe5\x83\x40\x1a\xcf\x4c\x14\xee\x01\x39\x8b\x27\x6c\x97\xc7\x26\x94\x04\x91\x2c\xdd\x61\xf1\x16\x15\x10\xf1\xca\xf3\x8e\xe3\xe6\xc4\xcb\x54\x12\x65\xa0\xf0\xf4\xaa\x84\x17\xd1\xf8\x36\x87\xbc\x34\x70\x7d\x07\xdc\x47\x9a\x48\xdc\xd3\x06\x6d\x42\x67\x73\x51\x0d\x40\x83\x80\x9d\x69\x23\x86\x19\xfa\xc1\xd1\x22\xa2\x05\x4d\xf5\x14\x03\x89\x7d\x28\xc1\x8f\xb0\x5c\x30\x0c\x5a\x8c\x63\x17\xea\x3b\xce\xca\xe0\xc3\xff\x44\xc0\x8c\xe1\xf2\x2d\xfb\x30\x01\xce\x52\xf4\xe1\x31\xe3\xac\xf5\x83\xc6\x02\x66\x80\x6e\x55\x67\x1a\xa5\x91\x94\xb9\x7c\x9d\xfc\xca\xaf\x5f\xfd\x67\xb0\xfb\x85\x84\x69\xdb\x06\xaf\x0d\xf6\x6e\x03\x88\x05\x9d\x52\xc0\xae\xd2\x82\x2a\x0b\x87\x26\xc7\x04\x42\x22\x20\x38\x19\x67\x03\xb5\x3b\x9c\x91\x98\x72\x22\xdf\x6f\xa7\x70\xe8\x99\xb1\xaa\x9d\x43\x63\x7a\x2f\x1b\x13\x7c\x59\x03\xde\xbc\x40\x2c\x8e\x9a\xb5\x72\x45\x87\x21\xf8\x22\x25\xe1\x13\xe1\x1c\x84\x2e\x85\x93\x1d\x8e\x7b\xaa\xf2\x9e\xb6\xa9\x44\x6b\xfe\x4c\x69\x45\xb8\x41\xf5\xbf\xad\x2b\x2e\xc2\xcf\x94\x22\xc8\x56\xec\xab\xb6\x45\xab\x69\xa0\x4c\x4d\x8d\xb1\x89\xa8\x2b\xec\xfa\x5a\x6a\xde\x38\x6b\xb6\x37\xd3\x2e\xf4\x7a\x66\xe5\x0f\x7c\xdb\x86\x88\x04\xc1\x3a\xb0\x24\xbc\x2f\x76\xb4\x53\x12\x72\x18\x14\xa2\xe9\x52\xdd\xc6\x61\xdd\x1e\x2b\x14\xed\x66\x7d\xac\xae\x4b\xd1\xe8\xa0\x46\x5d\xea\x6b\x14\xca\x0d\x98\xb2\xb8\x03\x8b\xd7\xff\x5a\x27\x41\x55\x88\xfa\xe0\x34\x5f\x32\x58\xed\x6a\xad\x97\x4b\x86\xf0\x20\x88\x80\xe8\xd8\xdb\x6b\x93\xa6\xc8\xae\x88\x64\xde\x7d\x60\x61\xd0\x66\x35\xee\x85\x6b\x21\xf5\x21\xf6\x3b\xab\xe4\x1b\xf8\xe6\x04\x89\xef\x03\xef\xec\x8b\x2b\x47\xb7\xa4\xb7\x67\xea\x56\x93\xa2\x6e\x45\x69\xe4\xd8\x0d\x40\xf3\xec\xde\x95\xd8\x3a\xbd\x73\x88\x4f\x24\x3a\x59\x25\xc8\x29\xd4\xb7\xc5\x9d\x12\xd9\x53\xf1\x62\x9c\x8c\xdc\x9b\xab\xb9\x93\x0f\xd6\x62\x66\x08\x1d\x54\xb7\x7f\x0c\x09\x5c\x5b\x1a\xfa\x20\x5b\x21\x22\xcd\x85\xf1\xd9\xba\x27\x2e\x8f\xa8\xac\xc5\x51\x28\xc7\x1f\x4d\x2a\xdb\xa7\x4c\x74\xc5\xe2\xae\x3a\xe4\x75\x5a\xfd\xc8\xcc\xd0\xf5\x5f\x28\x5a\x3e\x6f\x7b\x6c\xa5\xfc\x78\xdb\xa3\x2b\xe5\x87\x61\x2a\xdc\x3b\x57\xec\x9a\x1e\xe5\x63\xcf\x07\xce\x8a\x68\xbf\xe6\x55\x85\x00\xf6\x71\x9c\xa6\xe8\xb5\x79\x0a\xa3\xe7\x55\x73\x0c\xf3\xda\xde\xdb\x87\x51\x9f\x75\x21\xaf\x54\xcf\xfa\xda\xf6\xea\x7e\x62\x4a\xc6\xe6\x3d\xc2\x8e\xb7\x87\x1c\x60\x16\xb0\x0e\xa8\xd5\x11\x11\x80\xd4\x34\xc8\x2b\x19\xd2\x2e\x1b\x34\x2c\x90\xa6\xb3\x99\x0b\x6b\xf1\x4b\x3c\xab\xec\x9a\x6b\x96\xe8\x32\xd4\x5a\xad\x0c\xa5\x53\x9d\x72\x13\xc7\x52\xe8\xea\xca\x5a\xa1\x9c\x61\x7b\xda\x04\xe5\x93\x4e\x6b\x55\xe4\xfb\xc6\xc3\x28\x9e\x55\xf2\x52\x08\xa6\x0c\x23\x22\xdb\xd2\xf5\xeb\xe7\x82\x46\xa0\x0f\xba\xbc\xdd\xc5\xd8\xd2\x3e\x35\x94\x9f\x3a\x7a\x0d\xe2\x3f\x90\x7f\xab\xc1\x9f\x00\x00\x00\xff\xff\xe0\x04\xf8\xba\x1e\x22\x00\x00")

func schemasResearch_objectJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasResearch_objectJson,
		"schemas/research_object.json",
	)
}

func schemasResearch_objectJson() (*asset, error) {
	bytes, err := schemasResearch_objectJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/research_object.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasTypesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\x6a\xc3\x30\x10\x86\x77\x3f\xc5\x71\xcd\x18\x59\x71\x9b\x42\xa2\xbd\x5b\xb7\x8e\x26\x05\xd5\x92\x6d\xa5\x58\x36\xba\x33\x26\x04\xbd\x7b\x51\x15\x1b\xba\x75\x10\x1c\xdf\xa7\xff\xee\xbf\x17\x00\xe8\x0c\x2a\xc0\x9e\x79\x22\x25\xe5\xb2\x2c\xe5\xd5\x51\x53\xea\xa6\x9c\xbf\x65\x30\x44\x92\x9a\xde\x0e\x5a\xf2\x6d\xb2\x54\x5e\x69\xf4\xf2\x09\xf7\x29\xba\xcb\x66\xcd\x2b\x29\x93\x15\x99\x96\x63\xe8\xa4\x09\xba\x65\x71\x38\x3e\x76\x3c\x72\xc6\xb6\xce\x3b\x76\xa3\x27\x54\x90\x5a\x00\xa0\x1f\xfd\xdb\x30\xf1\xed\x83\x83\xf3\xdd\xc6\x01\x30\x1d\x4e\x37\x28\x9b\xfd\xca\x07\xe7\xdf\xad\xef\xb8\x47\x05\xd5\x2f\x8c\xd9\xe1\x3c\x3b\x83\xf0\x8f\x15\x93\x66\xb6\xc1\xa7\xbf\xf8\x59\x1f\xc4\x59\x8b\xf6\x72\x3f\x45\xb1\xcd\xc7\x28\xea\x4a\xbc\x5e\x36\xf0\x12\x45\x7d\x3a\xeb\xaf\xbf\x64\x9d\xab\xe7\xb8\xc3\xdc\xa5\x48\x2f\x16\x3f\x01\x00\x00\xff\xff\x37\xe5\x92\x9c\x65\x01\x00\x00")

func schemasTypesJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasTypesJson,
		"schemas/types.json",
	)
}

func schemasTypesJson() (*asset, error) {
	bytes, err := schemasTypesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/types.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataCreateReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\x41\x8b\xfa\x30\x10\xc5\xef\xf9\x14\x03\xc2\x1f\x3d\xb4\xf9\x7b\x75\x4f\xa2\x5e\x04\x15\xac\x37\x91\xed\x34\x9d\xb6\x91\x36\xc9\x66\xa6\xb0\x7e\xfb\xa5\x76\x5d\x44\xf6\xba\x97\xc0\x64\xde\x7b\xbc\xdf\x4c\x60\x47\x82\x25\x0a\xc2\x2a\x12\x0a\x29\xb5\x23\x66\xac\x09\x4e\xb7\x40\x0b\xc8\x1f\xfb\x71\x9d\xa7\x4a\xad\x89\x4d\xb4\x05\x31\x20\x6c\xb3\xc3\x1e\x02\xde\x5a\x8f\x25\xf8\x0a\xba\x47\x9a\xaf\x00\x1d\x9c\x0f\xc5\x95\x8c\x5c\xa6\x8d\x48\xe0\x85\xd6\xb5\x95\xa6\x2f\x52\xe3\x3b\xbd\xb5\x6c\x8e\xeb\x2c\xd3\xb1\x64\x4e\x0c\x3a\xef\xac\xc1\x36\x19\xec\x49\xe7\x4b\x6a\xb5\x44\x22\x3d\x4f\xe7\xe9\x7f\x1d\xa2\x0f\x14\xc5\x12\xeb\x31\x73\x06\xd2\xa0\x80\x65\xa8\xc9\x51\x44\xa1\x12\xca\x3e\x5a\x57\x03\x42\xbe\x3a\x6e\x96\xa7\x4d\x0e\x83\x09\xc5\x7a\x97\x2a\x35\x99\x40\x66\xc8\x61\xb4\x9e\x95\x4a\x20\x23\x27\x20\x1e\xb8\x2f\x46\xa0\xc8\xc3\xe8\xbc\xd8\xea\x36\xa6\xff\xe0\x54\x3e\xfe\x39\x4f\x83\x0c\x05\x91\x03\x73\x3f\x75\x39\x56\x3e\xd2\x47\x4f\x2c\x43\xe1\xcd\x27\x76\xa1\xa5\xc5\x3f\x57\x70\x78\x7b\x7e\xcf\x79\x1c\x65\xe9\x95\xbd\xcb\x2f\xd3\xe7\x71\x36\xb0\x9a\x86\x3a\xfc\xc5\xf9\xe2\x7f\xe7\xbb\xf0\x25\xe6\xf9\x77\xf6\xdd\x8a\x83\x77\x4c\x4a\xed\xf5\x32\x55\x5f\x01\x00\x00\xff\xff\x11\x1b\x89\xbb\x47\x02\x00\x00")

func messagesBodyMetadataCreateReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataCreateReadmeMd,
		"messages/body/metadata/create/README.md",
	)
}

func messagesBodyMetadataCreateReadmeMd() (*asset, error) {
	bytes, err := messagesBodyMetadataCreateReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/create/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataCreateRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xcb\x6e\xe3\x36\x14\xdd\xe7\x2b\x0c\xad\xc3\x09\x25\xeb\x99\x5d\xe0\xcc\x74\xa6\x4d\xa6\x41\xe2\x74\x53\x64\x41\x91\x57\x36\x5b\x59\x34\x48\x3a\x83\x34\xf0\xbf\x17\x94\x2d\x47\x0f\x52\xd6\x6c\xda\x20\x30\x04\xde\x43\xf2\x3e\xcf\xe1\xfb\xc5\x6c\xe6\x89\xfc\x2f\xa0\xfa\x79\xc7\x99\x77\x3d\xf3\xa2\x38\xc5\x90\x02\x46\x41\x4a\x22\x14\xe6\x01\x46\x59\x98\x02\x2a\x18\x66\x38\x4d\x52\x1f\x70\xee\x5d\x7e\xec\x5b\x72\x5d\x82\xd9\xa8\xb4\xe4\xd5\xaa\x6d\x7a\x00\xa9\x44\xf5\x28\x6a\xfb\x9f\x17\xb3\xd9\x6c\xf6\x5e\xff\xce\x66\xde\xb6\xb6\x79\xd7\xa7\x95\xd3\x5a\xe3\x48\x90\xa4\xbe\x4f\x42\x8a\x32\x9a\x47\x28\x84\x98\x21\x82\xe3\x0c\x45\xd4\xcf\x82\x34\x2d\x08\x44\x69\x7d\x5b\x67\xf7\x37\x06\x95\xe6\x05\x07\x79\xba\xf3\xf0\xf7\xde\xfa\xb6\xa0\xff\x20\xe5\xae\x1f\xc6\x08\x7c\xf9\xb6\x35\x68\xbf\x85\xda\x9f\xbe\x5f\x06\x5e\x7d\xae\xb4\x49\xd3\x06\x2a\xdd\x73\xcb\x1f\xd9\x75\x53\x14\xbc\xe4\x44\xf3\x3a\x51\x53\x77\xfd\xc2\x5f\xa1\xfa\x4e\x36\xf6\x68\x8e\xa0\x45\x35\x66\x7d\x1a\xb5\x2e\xa1\x84\xed\x5a\x54\xf0\x7d\xb7\xc9\xeb\x3c\x3b\xa1\xf7\x84\x97\x63\xf6\xdf\xe5\x8a\x54\x5c\xd5\x21\x3e\x57\x5c\x77\xfa\xc1\xf4\x51\xcf\x7e\xea\x8d\x34\x87\xa4\xf0\x63\x84\x21\xc1\x28\x8c\xfd\x02\x91\x80\xe5\x88\x65\x2c\xa1\x71\x48\xd2\xc2\x4f\x3a\x25\x1c\x9c\xe4\x4c\x50\x0f\xdb\xf3\xa8\x67\xfd\x95\x2b\xfa\xcd\x78\xe4\x5f\xba\x41\x23\x57\xf5\x90\x4d\x57\x8d\x40\x6e\x18\x93\xa0\x54\xeb\x3c\x6b\x0b\x36\x5f\xfb\xe6\x28\x4f\x1e\xc6\xf0\xd0\x39\xc6\xfc\xd2\x9a\xd4\x5b\x50\x54\xf2\xed\x31\x60\xcb\x28\x3f\xf2\xd5\x5a\xab\xe1\x18\xcb\x7a\xfd\x49\x13\x3d\x6c\xee\x9e\x83\x2f\x97\xdd\x4d\x5f\x45\xc9\x7a\x53\xea\xdc\x51\x72\x0a\x15\x85\x0e\xb8\xd3\x28\x47\xc0\x58\x55\x8f\x90\x0e\x41\x0c\x72\xb8\x1f\x5c\x4d\x28\x3d\xe4\xdb\x71\xf3\xc1\x6e\xab\xdc\xd1\xd4\x4e\x8e\xfb\x3e\x7b\x59\x88\xb6\x50\x27\x23\x1a\x4e\x74\x15\x60\x1c\x20\x1f\x23\x1c\x2c\x7d\x7c\x8d\xcd\x3f\xc2\xd1\x35\xc6\xa7\xe0\x6b\x7c\x87\xaf\xfa\xd7\xfc\x06\x6f\x3f\x84\x64\x1f\x41\xb6\xdc\x6c\xe3\x16\x44\xc3\x4a\xc8\xb7\x73\xb8\x47\x50\x62\x27\x29\xb4\x93\x72\x34\x35\x7e\xb7\xd7\x2c\x94\x7d\x8a\x95\x9f\x25\xe8\x16\xa4\x5f\x04\x4f\x42\xd9\x99\x2b\x6b\xf4\x8f\x06\x04\xec\x7f\xf6\xa2\xcd\x84\x76\xc5\x74\xb2\xd2\x59\x46\x9a\xc6\x46\x67\x98\x68\x1a\x0b\x4d\xe4\x9b\x07\x09\x0a\xe4\x6b\x7d\xd6\xe7\xd7\x36\x71\x7c\x3c\x10\xfa\x10\x67\xea\x07\xc8\x41\x05\x06\x88\x5b\xd0\x5d\x65\xb2\x7a\xf9\x85\xdb\xea\x50\xf0\x12\x1a\x1d\x02\x3f\xc2\x34\x24\x39\xc2\x73\xa3\x43\x10\x11\x94\x26\x41\x80\x92\x22\x9f\xcf\xe3\x2c\x4f\x70\x4b\x87\xea\x9d\x56\xfa\xe9\x20\x1c\x05\xaa\x6d\x4f\xfc\x9f\x6e\x64\x66\xf1\x8e\xe4\x60\x53\xd9\xda\x68\x28\x64\x21\xc1\x74\x78\xb7\x69\x7e\x92\x45\x6c\x3c\xd2\x2e\xb7\xb9\xeb\x24\x12\xad\x6b\xc6\x04\x62\x40\xf8\xdd\xe7\x8c\x53\x26\xce\xec\xb3\x89\xc5\xe0\xfd\x77\x5e\x30\xa6\x4a\x86\xeb\xe5\x67\x11\x8e\x81\x17\x6e\xf1\x98\x26\x1f\x9d\xbb\xad\x35\x59\xac\x81\xfe\xad\x76\x1b\xb7\x80\xd1\x23\xa2\xe9\x69\x56\x04\xf3\x3c\x8c\x73\x14\xe7\x71\x88\x42\x12\x62\x94\x86\x41\x81\x22\xc2\xe6\xf1\x3c\xcf\x63\xf0\xfd\xae\xb2\x36\x27\x58\x45\xb0\x31\xf6\xc7\x77\x44\x72\x8d\xdf\x5f\x84\xdc\x90\x66\x92\xad\x9d\xbd\x10\x9b\xad\x50\xdc\xcc\xf4\x1d\xbc\xba\x27\xe0\x2b\x51\xf7\x7c\xd3\x74\xae\x96\x3b\x18\x0c\xc8\xbd\x60\xa6\xbc\xcc\x9d\xa4\x9f\x9e\x16\xfb\xbc\xb8\xa2\x7d\x38\xe4\x7e\xc2\x4b\xa8\x66\x1f\x35\x24\x01\x37\xa3\x0e\x62\x99\xcc\xac\x76\xb4\xb5\xca\x13\x19\xd6\x9d\x81\xe7\x6d\x29\x08\x33\xcd\xbe\x53\x83\xe0\x9e\xb4\x90\x64\x05\x0e\xeb\x1d\x51\xfa\x56\xfc\xa8\xcc\x01\xff\x01\xcb\x2d\x81\xae\x2b\x4e\x49\x79\xa3\xb5\xe4\xf9\x4e\x83\x9a\x5e\xba\x63\x24\x77\x82\x36\x3a\xee\xad\xb5\xde\xaa\xeb\xab\x2b\x2d\x44\xa9\x3e\x71\xd0\xc5\x27\x21\x57\x57\x6b\xbd\x29\xaf\x64\x41\xe7\x59\x1a\x7b\xb6\x33\x1e\x4a\xa2\x0b\x21\x37\xdd\x80\x55\xd7\xd8\x0c\x75\x11\x64\xf3\x2c\xc2\x3e\x0a\xf2\x80\x19\xa1\xa2\x28\xf3\xb3\x04\x61\x46\x48\x94\x50\x9a\xc7\x41\x7b\xa8\xfb\xc7\xb8\x1f\x0d\x3d\xa0\xe5\xdd\xd0\x43\x2c\x84\xb2\x50\xd9\xfe\x43\x80\x2f\xf6\x17\xff\x06\x00\x00\xff\xff\xcb\xce\x71\x64\x97\x10\x00\x00")

func messagesBodyMetadataCreateRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataCreateRequestJson,
		"messages/body/metadata/create/request.json",
	)
}

func messagesBodyMetadataCreateRequestJson() (*asset, error) {
	bytes, err := messagesBodyMetadataCreateRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/create/request.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataCreateRequest_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xb1\xce\x83\x30\x0c\x04\xe0\x9d\xa7\x40\xf9\xff\xb1\xe4\x3a\x74\xe2\x65\x90\x49\x0c\x84\x0a\xd2\xda\x46\xa8\xaa\xfa\xee\x15\x02\xf6\xae\xbe\xb3\xbe\x7b\x17\x65\xe9\x52\x74\x75\xe9\x06\xb3\x87\xd6\xc0\xba\xae\x7e\x4c\x1a\x3c\x05\xbf\xdc\x21\x51\x15\x1a\x06\x9e\x08\x13\xab\x52\xcf\x8a\x36\xc7\x17\x26\x36\x8a\x64\x84\x20\x4c\xc6\x10\x7e\x2e\xac\xd6\xec\x65\x3f\x6a\x9e\xf1\xe7\x2e\x9b\xf0\xbf\xdf\x4e\xa6\x06\xb6\xb4\x3a\x9a\x59\x7a\x44\xa1\xce\xaa\xeb\xed\xa0\xce\x3f\xe1\xee\xc7\x6d\xc2\xca\x24\x61\x68\x72\x3b\x72\xb0\x83\x47\xe4\x2e\xcd\xc9\x52\x9e\x15\x7b\xe2\x8a\x4f\xf1\x0d\x00\x00\xff\xff\x7a\x9a\xdd\x2b\xf7\x00\x00\x00")

func messagesBodyMetadataCreateRequest_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataCreateRequest_schemaJson,
		"messages/body/metadata/create/request_schema.json",
	)
}

func messagesBodyMetadataCreateRequest_schemaJson() (*asset, error) {
	bytes, err := messagesBodyMetadataCreateRequest_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/create/request_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataDeleteReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\xc1\xca\xdb\x30\x10\x84\xef\x7a\x8a\x85\x40\xf9\x73\xb0\xd5\x5c\xd3\x53\xc1\xbe\x84\x26\x81\x38\xb7\x10\xea\xb5\xb4\xb6\x15\x6c\x49\xd5\xae\xa1\x79\xfb\xe2\xb8\x29\x21\xf4\xfa\x5f\x04\xab\x9d\x19\xe6\xdb\x15\xec\x49\xd0\xa2\x20\x14\x34\x90\x90\x52\x7b\x62\xc6\x8e\xe0\x7c\x8f\xb4\x85\xfa\xb9\x5f\xd6\x75\xae\x54\x41\x6c\x92\x6b\x88\x01\x61\x57\x1d\x0f\x10\xf1\x3e\x04\xb4\x10\x5a\x18\x9f\x69\xa1\x05\xf4\x70\x39\x36\x37\x32\x72\xfd\xe8\x45\x22\x6f\xb5\xee\x9c\xf4\x53\x93\x9b\x30\xea\x9d\x63\x73\x2a\xaa\x4a\x27\xcb\x9c\x19\xf4\xc1\x3b\x83\x43\x36\xdb\xb3\x31\x58\x1a\xb4\x24\x22\xbd\xc9\x37\xf9\x57\x1d\x53\x88\x94\xc4\x11\xeb\x25\x73\x0d\xd2\xa3\x80\x63\xe8\xc8\x53\x42\x21\x0b\x76\x4a\xce\x77\x80\x50\x17\xe5\x8f\xf2\x5c\xd6\x30\x9b\x50\x5c\xf0\xb9\x52\xab\x15\x54\x86\x3c\x26\x17\x58\xa9\x0c\x2a\xf2\x02\x12\x80\xa7\x66\x01\x4a\x3c\x8f\x3e\x88\x6b\xef\x4b\xfa\x3f\x9c\x36\xa4\x4f\xe7\xe9\x91\xa1\x21\xf2\x60\x1f\xa7\xb6\x4b\xe5\x13\xfd\x9a\x88\x65\x2e\x5c\xfe\xc6\x31\x0e\xb4\xfd\xe2\x1b\x8e\xdf\x5e\xdf\x4b\x9d\x16\x59\x7e\xe3\xe0\xeb\xeb\xc7\xeb\xb8\x9e\x59\x4d\x4f\x23\xfe\xc7\xf9\xe6\xff\xc9\x0f\xe1\x5b\xcc\xeb\xef\xfa\x6f\x2b\x8e\xc1\x33\x29\x75\xd0\xdf\x73\xf5\x27\x00\x00\xff\xff\x57\x41\x68\xae\x47\x02\x00\x00")

func messagesBodyMetadataDeleteReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataDeleteReadmeMd,
		"messages/body/metadata/delete/README.md",
	)
}

func messagesBodyMetadataDeleteReadmeMd() (*asset, error) {
	bytes, err := messagesBodyMetadataDeleteReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/delete/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataDeleteRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\xca\x4f\xca\x4a\x4d\x2e\x09\x2d\xcd\x4c\x51\xb2\x52\x50\x4a\x4d\x36\x36\x33\x4b\x33\x32\xd7\x4d\x4b\x31\x31\xd6\x35\x31\x49\x4a\xd3\x4d\x32\x35\xb6\xd4\x35\x36\x36\xb0\x34\x37\x37\x4d\x31\x35\x37\x48\x52\xe2\xaa\xe5\x02\x04\x00\x00\xff\xff\x61\xdb\x1b\xa4\x3b\x00\x00\x00")

func messagesBodyMetadataDeleteRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataDeleteRequestJson,
		"messages/body/metadata/delete/request.json",
	)
}

func messagesBodyMetadataDeleteRequestJson() (*asset, error) {
	bytes, err := messagesBodyMetadataDeleteRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/delete/request.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataDeleteRequest_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xc1\x8e\x83\x20\x10\x80\xe1\x3b\x4f\x41\xd8\x3d\xae\xcc\x1e\xf6\xe4\x7b\xec\xa9\x69\x1a\x84\x51\xb1\x55\x2c\x33\xc4\x98\xc6\x77\x6f\x50\x9a\xf4\xd8\x2b\xcc\xcc\xf7\x3f\x84\x94\xca\x3b\x55\x4b\xd5\x33\xcf\x54\x03\x2c\xcb\xa2\x07\x4f\x56\x1b\xab\xd3\x15\xa2\x23\x02\xb2\x3d\x8e\x06\x46\x24\x32\x1d\x12\x34\xc1\xad\x30\x22\x1b\x67\xd8\x80\xc3\x1b\x32\x42\xc4\x7b\x42\xe2\xcb\x31\xac\x07\x0a\x13\x7c\xa9\x9f\x2c\x7c\x1f\x6f\x2f\xa6\x06\xc8\xbf\x55\x99\x0c\xb1\x03\x17\x4d\xcb\xd5\xef\x5f\xa1\xca\x5e\x68\x06\xb4\xfc\x9f\xf6\xc2\xdc\x9a\x6f\x45\x6c\x3f\xec\xe5\x75\x46\x2a\x21\xe0\xb0\xf5\x93\x67\x1f\x26\x82\x94\x2f\x0a\x29\xb7\x5d\xc9\xe1\x3e\x62\x36\x4e\x87\xf1\xe6\x0a\x29\xcf\x62\x13\xcf\x00\x00\x00\xff\xff\x67\x39\xc2\xa5\x29\x01\x00\x00")

func messagesBodyMetadataDeleteRequest_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataDeleteRequest_schemaJson,
		"messages/body/metadata/delete/request_schema.json",
	)
}

func messagesBodyMetadataDeleteRequest_schemaJson() (*asset, error) {
	bytes, err := messagesBodyMetadataDeleteRequest_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/delete/request_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataReadReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8f\x41\x8b\xdb\x30\x10\x85\xef\xfa\x15\x03\x81\xb2\x3e\xd8\xea\x5e\xd3\x53\x21\x7b\x59\x48\x03\x76\x6f\x21\xd4\x63\x69\x62\x2b\xd8\x92\xa2\x19\xd3\xe4\xdf\x17\xd7\x0d\x31\x49\xa1\xbd\xec\x65\x60\x66\xde\x7b\x7c\x6f\x05\x5b\x12\xb4\x28\x08\x25\xa1\x55\x6a\x4b\xcc\xd8\x12\x7c\xbf\x46\x5a\x43\x7d\xfb\x4e\xcf\xba\x50\x6a\x43\x6c\x92\x6b\x88\x01\xe1\xbd\xda\x7d\x83\x88\xd7\x3e\xa0\x85\x70\x84\xe1\x96\x14\x8e\x80\x1e\xf6\xbb\xe6\x44\x46\x0e\x2f\x9d\x48\xe4\xb5\xd6\xad\x93\x6e\x6c\x0a\x13\x06\xfd\xee\xd8\x94\x9b\xaa\xd2\xc9\x32\xe7\x06\x7d\xf0\xce\x60\x9f\x4f\xf6\x7c\x08\x96\x7a\x2d\x89\x48\xbf\x16\xaf\xc5\x67\x1d\x53\x88\x94\xc4\x11\xeb\x39\x33\x03\xe9\x50\xc0\x31\xb4\xe4\x29\xa1\x90\x05\x3b\x26\xe7\x5b\x40\xa8\xcb\xb7\xaf\x9b\x1a\x26\x0b\x8a\x0b\xbe\x50\x6a\xb5\x82\xca\x90\xc7\xe4\x02\x2b\x95\x43\x45\x5e\xa0\xb9\x02\x8f\xcd\x5c\x27\x31\xfc\xec\xc8\x83\x74\x74\xaf\x71\x0c\x69\xea\x41\x17\xc7\x32\x45\x7f\x68\x21\xc7\x90\xe8\x3c\xba\x44\x76\x06\x2e\xe9\x3c\x12\xcb\x84\xfb\x76\xc1\x21\xf6\xb4\xfe\xe4\x1b\x8e\x5f\x96\x73\x5f\xa7\x59\x56\x9c\x38\xf8\xfa\xf0\xb2\x5c\xb3\xa9\xa9\xe9\x68\xc0\xbf\x38\x1f\xfc\x3f\xf8\xb7\xf0\x21\x66\x79\xcd\xfe\x50\x71\x0c\x9e\xe9\xdf\x58\xb3\xee\x1e\xb8\xd8\xff\x13\x6c\x76\x3c\x91\x3d\x9f\x33\xf5\x2b\x00\x00\xff\xff\xcf\xf2\xcb\xbc\xc7\x02\x00\x00")

func messagesBodyMetadataReadReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataReadReadmeMd,
		"messages/body/metadata/read/README.md",
	)
}

func messagesBodyMetadataReadReadmeMd() (*asset, error) {
	bytes, err := messagesBodyMetadataReadReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/read/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataReadRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\xca\x4f\xca\x4a\x4d\x2e\x09\x2d\xcd\x4c\x51\xb2\x52\x50\x4a\x4d\x36\x36\x33\x4b\x33\x32\xd7\x4d\x4b\x31\x31\xd6\x35\x31\x49\x4a\xd3\x4d\x32\x35\xb6\xd4\x35\x36\x36\xb0\x34\x37\x37\x4d\x31\x35\x37\x48\x52\xe2\xaa\xe5\x02\x04\x00\x00\xff\xff\x61\xdb\x1b\xa4\x3b\x00\x00\x00")

func messagesBodyMetadataReadRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataReadRequestJson,
		"messages/body/metadata/read/request.json",
	)
}

func messagesBodyMetadataReadRequestJson() (*asset, error) {
	bytes, err := messagesBodyMetadataReadRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/read/request.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataReadRequest_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xc1\x6e\x84\x20\x10\x86\xef\x3c\x05\xa1\x3d\x56\xa6\x87\x9e\x7c\x8f\x9e\x9a\xa6\x19\x61\x54\x6c\x14\xcb\x0c\x31\xa6\xf1\xdd\x37\x28\x9b\xec\x71\xaf\xf0\xcf\xf7\x7d\xff\x4a\x6b\x13\xbc\x69\xb5\x19\x45\x56\x6e\x01\xb6\x6d\xb3\x53\x60\x67\xd1\xd9\xfc\x0b\xc9\x33\x03\xbb\x91\x66\x84\x99\x98\x71\x20\x86\x2e\xfa\x1d\x66\x12\xf4\x28\x08\x89\xd0\x43\xa2\xbf\x4c\x2c\x3f\xd7\xd4\x4e\x1c\x17\x78\x31\x6f\x85\xff\x7a\xbd\xdd\x25\x2d\x40\xf9\x6d\xea\x32\xa6\x01\x7c\xc2\x5e\x9a\xf7\x8f\x2a\xaa\x77\xb1\x9b\xc8\xc9\x67\x3e\xfb\x4a\x69\x61\x25\xea\x9f\xac\x95\x7d\x25\xae\x21\xe0\xa9\x0f\x4b\x90\x10\x17\x86\x5c\x88\x4a\xeb\xe3\xb4\x94\xf0\x90\xa8\x38\xbe\x2e\xc7\x83\x57\x69\xfd\xad\x0e\x75\x0b\x00\x00\xff\xff\x1a\x84\xbb\x15\x27\x01\x00\x00")

func messagesBodyMetadataReadRequest_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataReadRequest_schemaJson,
		"messages/body/metadata/read/request_schema.json",
	)
}

func messagesBodyMetadataReadRequest_schemaJson() (*asset, error) {
	bytes, err := messagesBodyMetadataReadRequest_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/read/request_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataReadResponseJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xcb\x6e\xe3\x36\x14\xdd\xe7\x2b\x0c\xad\xc3\x09\x25\xeb\x99\x5d\xe0\xcc\x74\xa6\x4d\xa6\x41\xe2\x74\x53\x64\x41\x91\x57\x36\x5b\x59\x34\x48\x3a\x83\x34\xf0\xbf\x17\x94\x2d\x47\x0f\x52\xd6\x6c\xda\x20\x30\x04\xde\x43\xf2\x3e\xcf\xe1\xfb\xc5\x6c\xe6\x89\xfc\x2f\xa0\xfa\x79\xc7\x99\x77\x3d\xf3\xa2\x38\xc5\x90\x02\x46\x41\x4a\x22\x14\xe6\x01\x46\x59\x98\x02\x2a\x18\x66\x38\x4d\x52\x1f\x70\xee\x5d\x7e\xec\x5b\x72\x5d\x82\xd9\xa8\xb4\xe4\xd5\xaa\x6d\x7a\x00\xa9\x44\xf5\x28\x6a\xfb\x9f\x17\xb3\xd9\x6c\xf6\x5e\xff\xce\x66\xde\xb6\xb6\x79\xd7\xa7\x95\xd3\x5a\xe3\x48\x90\xa4\xbe\x4f\x42\x8a\x32\x9a\x47\x28\x84\x98\x21\x82\xe3\x0c\x45\xd4\xcf\x82\x34\x2d\x08\x44\x69\x7d\x5b\x67\xf7\x37\x06\x95\xe6\x05\x07\x79\xba\xf3\xf0\xf7\xde\xfa\xb6\xa0\xff\x20\xe5\xae\x1f\xc6\x08\x7c\xf9\xb6\x35\x68\xbf\x85\xda\x9f\xbe\x5f\x06\x5e\x7d\xae\xb4\x49\xd3\x06\x2a\xdd\x73\xcb\x1f\xd9\x75\x53\x14\xbc\xe4\x44\xf3\x3a\x51\x53\x77\xfd\xc2\x5f\xa1\xfa\x4e\x36\xf6\x68\x8e\xa0\x45\x35\x66\x7d\x1a\xb5\x2e\xa1\x84\xed\x5a\x54\xf0\x7d\xb7\xc9\xeb\x3c\x3b\xa1\xf7\x84\x97\x63\xf6\xdf\xe5\x8a\x54\x5c\xd5\x21\x3e\x57\x5c\x77\xfa\xc1\xf4\x51\xcf\x7e\xea\x8d\x34\x87\xa4\xf0\x63\x84\x21\xc1\x28\x8c\xfd\x02\x91\x80\xe5\x88\x65\x2c\xa1\x71\x48\xd2\xc2\x4f\x3a\x25\x1c\x9c\xe4\x4c\x50\x0f\xdb\xf3\xa8\x67\xfd\x95\x2b\xfa\xcd\x78\xe4\x5f\xba\x41\x23\x57\xf5\x90\x4d\x57\x8d\x40\x6e\x18\x93\xa0\x54\xeb\x3c\x6b\x0b\x36\x5f\xfb\xe6\x28\x4f\x1e\xc6\xf0\xd0\x39\xc6\xfc\xd2\x9a\xd4\x5b\x50\x54\xf2\xed\x31\x60\xcb\x28\x3f\xf2\xd5\x5a\xab\xe1\x18\xcb\x7a\xfd\x49\x13\x3d\x6c\xee\x9e\x83\x2f\x97\xdd\x4d\x5f\x45\xc9\x7a\x53\xea\xdc\x51\x72\x0a\x15\x85\x0e\xb8\xd3\x28\x47\xc0\x58\x55\x8f\x90\x0e\x41\x0c\x72\xb8\x1f\x5c\x4d\x28\x3d\xe4\xdb\x71\xf3\xc1\x6e\xab\xdc\xd1\xd4\x4e\x8e\xfb\x3e\x7b\x59\x88\xb6\x50\x27\x23\x1a\x4e\x74\x15\x60\x1c\x20\x1f\x23\x1c\x2c\x7d\x7c\x8d\xcd\x3f\xc2\xd1\x35\xc6\xa7\xe0\x6b\x7c\x87\xaf\xfa\xd7\xfc\x06\x6f\x3f\x84\x64\x1f\x41\xb6\xdc\x6c\xe3\x16\x44\xc3\x4a\xc8\xb7\x73\xb8\x47\x50\x62\x27\x29\xb4\x93\x72\x34\x35\x7e\xb7\xd7\x2c\x94\x7d\x8a\x95\x9f\x25\xe8\x16\xa4\x5f\x04\x4f\x42\xd9\x99\x2b\x6b\xf4\x8f\x06\x04\xec\x7f\xf6\xa2\xcd\x84\x76\xc5\x74\xb2\xd2\x59\x46\x9a\xc6\x46\x67\x98\x68\x1a\x0b\x4d\xe4\x9b\x07\x09\x0a\xe4\x6b\x7d\xd6\xe7\xd7\x36\x71\x7c\x3c\x10\xfa\x10\x67\xea\x07\xc8\x41\x05\x06\x88\x5b\xd0\x5d\x65\xb2\x7a\xf9\x85\xdb\xea\x50\xf0\x12\x1a\x1d\x02\x3f\xc2\x34\x24\x39\xc2\x73\xa3\x43\x10\x11\x94\x26\x41\x80\x92\x22\x9f\xcf\xe3\x2c\x4f\x70\x4b\x87\xea\x9d\x56\xfa\xe9\x20\x1c\x05\xaa\x6d\x4f\xfc\x9f\x6e\x64\x66\xf1\x8e\xe4\x60\x53\xd9\xda\x68\x28\x64\x21\xc1\x74\x78\xb7\x69\x7e\x92\x45\x6c\x3c\xd2\x2e\xb7\xb9\xeb\x24\x12\xad\x6b\xc6\x04\x62\x40\xf8\xdd\xe7\x8c\x53\x26\xce\xec\xb3\x89\xc5\xe0\xfd\x77\x5e\x30\xa6\x4a\x86\xeb\xe5\x67\x11\x8e\x81\x17\x6e\xf1\x98\x26\x1f\x9d\xbb\xad\x35\x59\xac\x81\xfe\xad\x76\x1b\xb7\x80\xd1\x23\xa2\xe9\x69\x56\x04\xf3\x3c\x8c\x73\x14\xe7\x71\x88\x42\x12\x62\x94\x86\x41\x81\x22\xc2\xe6\xf1\x3c\xcf\x63\xf0\xfd\xae\xb2\x36\x27\x58\x45\xb0\x31\xf6\xc7\x77\x44\x72\x8d\xdf\x5f\x84\xdc\x90\x66\x92\xad\x9d\xbd\x10\x9b\xad\x50\xdc\xcc\xf4\x1d\xbc\xba\x27\xe0\x2b\x51\xf7\x7c\xd3\x74\xae\x96\x3b\x18\x0c\xc8\xbd\x60\xa6\xbc\xcc\x9d\xa4\x9f\x9e\x16\xfb\xbc\xb8\xa2\x7d\x38\xe4\x7e\xc2\x4b\xa8\x66\x1f\x35\x24\x01\x37\xa3\x0e\x62\x99\xcc\xac\x76\xb4\xb5\xca\x13\x19\xd6\x9d\x81\xe7\x6d\x29\x08\x33\xcd\xbe\x53\x83\xe0\x9e\xb4\x90\x64\x05\x0e\xeb\x1d\x51\xfa\x56\xfc\xa8\xcc\x01\xff\x01\xcb\x2d\x81\xae\x2b\x4e\x49\x79\xa3\xb5\xe4\xf9\x4e\x83\x9a\x5e\xba\x63\x24\x77\x82\x36\x3a\xee\xad\xb5\xde\xaa\xeb\xab\x2b\x2d\x44\xa9\x3e\x71\xd0\xc5\x27\x21\x57\x57\x6b\xbd\x29\xaf\x64\x41\xe7\x59\x1a\x7b\xb6\x33\x1e\x4a\xa2\x0b\x21\x37\xdd\x80\x55\xd7\xd8\x0c\x75\x11\x64\xf3\x2c\xc2\x3e\x0a\xf2\x80\x19\xa1\xa2\x28\xf3\xb3\x04\x61\x46\x48\x94\x50\x9a\xc7\x41\x7b\xa8\xfb\xc7\xb8\x1f\x0d\x3d\xa0\xe5\xdd\xd0\x43\x2c\x84\xb2\x50\xd9\xfe\x43\x80\x2f\xf6\x17\xff\x06\x00\x00\xff\xff\xcb\xce\x71\x64\x97\x10\x00\x00")

func messagesBodyMetadataReadResponseJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataReadResponseJson,
		"messages/body/metadata/read/response.json",
	)
}

func messagesBodyMetadataReadResponseJson() (*asset, error) {
	bytes, err := messagesBodyMetadataReadResponseJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/read/response.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataReadResponse_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xc1\x8e\x83\x30\x0c\x04\xd0\x3b\x5f\x81\xb2\x7b\x5c\x32\x7b\xe8\x89\x9f\x41\x26\x31\x10\x2a\x12\x64\xbb\x42\x55\xd5\x7f\xaf\x10\x70\xef\xd5\x33\xd6\x9b\x57\x55\xd7\x2e\x45\xd7\xd6\x6e\x32\x5b\xb5\x05\xb6\x6d\xf3\x73\xd2\xe0\x29\xf8\xc7\x1d\x12\x55\xa1\x61\xe2\x85\xb0\xb0\x2a\x8d\xac\xe8\x4b\x7c\x62\x61\xa3\x48\x46\x10\xa6\x08\x61\x5d\x4b\x56\xee\x8e\xae\x9f\xb5\x64\xfc\xb8\xbf\x1d\xf8\x3d\x6e\x97\xd2\x02\x7b\xda\x9c\xcd\x22\x23\xa2\xd0\x60\xcd\xff\xed\x94\xae\x3f\xe1\xe1\xcb\x69\xc2\xca\x24\x61\xea\x4a\x3f\x73\xb0\x93\x47\xe4\x21\xe5\x64\xa9\x64\xc5\x91\xb8\xea\x5d\x7d\x02\x00\x00\xff\xff\x8b\xe3\xab\x06\xf6\x00\x00\x00")

func messagesBodyMetadataReadResponse_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataReadResponse_schemaJson,
		"messages/body/metadata/read/response_schema.json",
	)
}

func messagesBodyMetadataReadResponse_schemaJson() (*asset, error) {
	bytes, err := messagesBodyMetadataReadResponse_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/read/response_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataUpdateReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\x41\x0b\xda\x40\x10\x85\xef\xfb\x2b\x06\x84\xa2\x87\x64\xeb\xd5\x9e\x04\xbd\x08\x6a\x31\x7a\x12\x69\x26\xbb\x93\x64\x25\xd9\xdd\xee\x4c\xa0\xfe\xfb\x12\x53\x8b\x48\xaf\xbd\x2c\xcc\xce\x7b\x8f\xf7\xcd\x0c\xf6\x24\x68\x51\x10\x2e\xd1\xa2\x90\x52\x7b\x62\xc6\x86\xe0\xfc\x88\xb4\x82\xf2\xb5\x9f\xd6\x65\xae\xd4\x86\xd8\x24\x57\x11\x03\xc2\xae\x38\x1e\x20\xe2\xa3\x0b\x68\x21\xd4\xd0\xbf\xd2\x42\x0d\xe8\xe1\x7a\xac\xee\x64\xe4\x36\x6f\x45\x22\xaf\xb4\x6e\x9c\xb4\x43\x95\x9b\xd0\xeb\x9d\x63\x73\xda\x14\x85\x4e\x96\x39\x33\xe8\x83\x77\x06\xbb\x6c\xb4\x67\x7d\xb0\xd4\x69\x49\x44\x7a\x99\x2f\xf3\xaf\x3a\xa6\x10\x29\x89\x23\xd6\x53\xe6\x02\xa4\x45\x01\xc7\xd0\x90\xa7\x84\x42\x16\xec\x90\x9c\x6f\x00\xa1\xbc\x7c\xdf\xac\xcf\xdb\x12\x46\x13\x8a\x0b\x3e\x57\x6a\x36\x83\xc2\x90\xc7\xe4\x02\x2b\x95\x41\x41\x5e\x40\x02\xf0\x50\x4d\x40\x89\xc7\xd1\x07\x71\xf5\x63\x4a\xff\x8b\x53\x87\xf4\xdf\x79\x5a\x64\xa8\x88\x3c\x0c\xcf\x53\xdb\xa9\xf2\x89\x7e\x0e\xc4\x32\x16\xde\xfe\xc2\x3e\x76\xb4\xfa\xe2\x2b\x8e\xdf\xde\xdf\x6b\x99\x26\x59\x7e\xe7\xe0\xcb\xdb\xfc\x7d\x5c\x8c\xac\xa6\xa5\x1e\xff\xe1\xfc\xf0\xff\xe0\xa7\xf0\x23\xe6\xfd\x77\xf1\xa7\x15\xc7\xe0\x99\x94\x3a\xe8\x75\xae\x7e\x07\x00\x00\xff\xff\xfb\x23\x4c\x8b\x47\x02\x00\x00")

func messagesBodyMetadataUpdateReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataUpdateReadmeMd,
		"messages/body/metadata/update/README.md",
	)
}

func messagesBodyMetadataUpdateReadmeMd() (*asset, error) {
	bytes, err := messagesBodyMetadataUpdateReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/update/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataUpdateRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xcb\x6e\xe3\x36\x14\xdd\xe7\x2b\x0c\xad\xc3\x09\x25\xeb\x99\x5d\xe0\xcc\x74\xa6\x4d\xa6\x41\xe2\x74\x53\x64\x41\x91\x57\x36\x5b\x59\x34\x48\x3a\x83\x34\xf0\xbf\x17\x94\x2d\x47\x0f\x52\xd6\x6c\xda\x20\x30\x04\xde\x43\xf2\x3e\xcf\xe1\xfb\xc5\x6c\xe6\x89\xfc\x2f\xa0\xfa\x79\xc7\x99\x77\x3d\xf3\xa2\x38\xc5\x90\x02\x46\x41\x4a\x22\x14\xe6\x01\x46\x59\x98\x02\x2a\x18\x66\x38\x4d\x52\x1f\x70\xee\x5d\x7e\xec\x5b\x72\x5d\x82\xd9\xa8\xb4\xe4\xd5\xaa\x6d\x7a\x00\xa9\x44\xf5\x28\x6a\xfb\x9f\x17\xb3\xd9\x6c\xf6\x5e\xff\xce\x66\xde\xb6\xb6\x79\xd7\xa7\x95\xd3\x5a\xe3\x48\x90\xa4\xbe\x4f\x42\x8a\x32\x9a\x47\x28\x84\x98\x21\x82\xe3\x0c\x45\xd4\xcf\x82\x34\x2d\x08\x44\x69\x7d\x5b\x67\xf7\x37\x06\x95\xe6\x05\x07\x79\xba\xf3\xf0\xf7\xde\xfa\xb6\xa0\xff\x20\xe5\xae\x1f\xc6\x08\x7c\xf9\xb6\x35\x68\xbf\x85\xda\x9f\xbe\x5f\x06\x5e\x7d\xae\xb4\x49\xd3\x06\x2a\xdd\x73\xcb\x1f\xd9\x75\x53\x14\xbc\xe4\x44\xf3\x3a\x51\x53\x77\xfd\xc2\x5f\xa1\xfa\x4e\x36\xf6\x68\x8e\xa0\x45\x35\x66\x7d\x1a\xb5\x2e\xa1\x84\xed\x5a\x54\xf0\x7d\xb7\xc9\xeb\x3c\x3b\xa1\xf7\x84\x97\x63\xf6\xdf\xe5\x8a\x54\x5c\xd5\x21\x3e\x57\x5c\x77\xfa\xc1\xf4\x51\xcf\x7e\xea\x8d\x34\x87\xa4\xf0\x63\x84\x21\xc1\x28\x8c\xfd\x02\x91\x80\xe5\x88\x65\x2c\xa1\x71\x48\xd2\xc2\x4f\x3a\x25\x1c\x9c\xe4\x4c\x50\x0f\xdb\xf3\xa8\x67\xfd\x95\x2b\xfa\xcd\x78\xe4\x5f\xba\x41\x23\x57\xf5\x90\x4d\x57\x8d\x40\x6e\x18\x93\xa0\x54\xeb\x3c\x6b\x0b\x36\x5f\xfb\xe6\x28\x4f\x1e\xc6\xf0\xd0\x39\xc6\xfc\xd2\x9a\xd4\x5b\x50\x54\xf2\xed\x31\x60\xcb\x28\x3f\xf2\xd5\x5a\xab\xe1\x18\xcb\x7a\xfd\x49\x13\x3d\x6c\xee\x9e\x83\x2f\x97\xdd\x4d\x5f\x45\xc9\x7a\x53\xea\xdc\x51\x72\x0a\x15\x85\x0e\xb8\xd3\x28\x47\xc0\x58\x55\x8f\x90\x0e\x41\x0c\x72\xb8\x1f\x5c\x4d\x28\x3d\xe4\xdb\x71\xf3\xc1\x6e\xab\xdc\xd1\xd4\x4e\x8e\xfb\x3e\x7b\x59\x88\xb6\x50\x27\x23\x1a\x4e\x74\x15\x60\x1c\x20\x1f\x23\x1c\x2c\x7d\x7c\x8d\xcd\x3f\xc2\xd1\x35\xc6\xa7\xe0\x6b\x7c\x87\xaf\xfa\xd7\xfc\x06\x6f\x3f\x84\x64\x1f\x41\xb6\xdc\x6c\xe3\x16\x44\xc3\x4a\xc8\xb7\x73\xb8\x47\x50\x62\x27\x29\xb4\x93\x72\x34\x35\x7e\xb7\xd7\x2c\x94\x7d\x8a\x95\x9f\x25\xe8\x16\xa4\x5f\x04\x4f\x42\xd9\x99\x2b\x6b\xf4\x8f\x06\x04\xec\x7f\xf6\xa2\xcd\x84\x76\xc5\x74\xb2\xd2\x59\x46\x9a\xc6\x46\x67\x98\x68\x1a\x0b\x4d\xe4\x9b\x07\x09\x0a\xe4\x6b\x7d\xd6\xe7\xd7\x36\x71\x7c\x3c\x10\xfa\x10\x67\xea\x07\xc8\x41\x05\x06\x88\x5b\xd0\x5d\x65\xb2\x7a\xf9\x85\xdb\xea\x50\xf0\x12\x1a\x1d\x02\x3f\xc2\x34\x24\x39\xc2\x73\xa3\x43\x10\x11\x94\x26\x41\x80\x92\x22\x9f\xcf\xe3\x2c\x4f\x70\x4b\x87\xea\x9d\x56\xfa\xe9\x20\x1c\x05\xaa\x6d\x4f\xfc\x9f\x6e\x64\x66\xf1\x8e\xe4\x60\x53\xd9\xda\x68\x28\x64\x21\xc1\x74\x78\xb7\x69\x7e\x92\x45\x6c\x3c\xd2\x2e\xb7\xb9\xeb\x24\x12\xad\x6b\xc6\x04\x62\x40\xf8\xdd\xe7\x8c\x53\x26\xce\xec\xb3\x89\xc5\xe0\xfd\x77\x5e\x30\xa6\x4a\x86\xeb\xe5\x67\x11\x8e\x81\x17\x6e\xf1\x98\x26\x1f\x9d\xbb\xad\x35\x59\xac\x81\xfe\xad\x76\x1b\xb7\x80\xd1\x23\xa2\xe9\x69\x56\x04\xf3\x3c\x8c\x73\x14\xe7\x71\x88\x42\x12\x62\x94\x86\x41\x81\x22\xc2\xe6\xf1\x3c\xcf\x63\xf0\xfd\xae\xb2\x36\x27\x58\x45\xb0\x31\xf6\xc7\x77\x44\x72\x8d\xdf\x5f\x84\xdc\x90\x66\x92\xad\x9d\xbd\x10\x9b\xad\x50\xdc\xcc\xf4\x1d\xbc\xba\x27\xe0\x2b\x51\xf7\x7c\xd3\x74\xae\x96\x3b\x18\x0c\xc8\xbd\x60\xa6\xbc\xcc\x9d\xa4\x9f\x9e\x16\xfb\xbc\xb8\xa2\x7d\x38\xe4\x7e\xc2\x4b\xa8\x66\x1f\x35\x24\x01\x37\xa3\x0e\x62\x99\xcc\xac\x76\xb4\xb5\xca\x13\x19\xd6\x9d\x81\xe7\x6d\x29\x08\x33\xcd\xbe\x53\x83\xe0\x9e\xb4\x90\x64\x05\x0e\xeb\x1d\x51\xfa\x56\xfc\xa8\xcc\x01\xff\x01\xcb\x2d\x81\xae\x2b\x4e\x49\x79\xa3\xb5\xe4\xf9\x4e\x83\x9a\x5e\xba\x63\x24\x77\x82\x36\x3a\xee\xad\xb5\xde\xaa\xeb\xab\x2b\x2d\x44\xa9\x3e\x71\xd0\xc5\x27\x21\x57\x57\x6b\xbd\x29\xaf\x64\x41\xe7\x59\x1a\x7b\xb6\x33\x1e\x4a\xa2\x0b\x21\x37\xdd\x80\x55\xd7\xd8\x0c\x75\x11\x64\xf3\x2c\xc2\x3e\x0a\xf2\x80\x19\xa1\xa2\x28\xf3\xb3\x04\x61\x46\x48\x94\x50\x9a\xc7\x41\x7b\xa8\xfb\xc7\xb8\x1f\x0d\x3d\xa0\xe5\xdd\xd0\x43\x2c\x84\xb2\x50\xd9\xfe\x43\x80\x2f\xf6\x17\xff\x06\x00\x00\xff\xff\xcb\xce\x71\x64\x97\x10\x00\x00")

func messagesBodyMetadataUpdateRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataUpdateRequestJson,
		"messages/body/metadata/update/request.json",
	)
}

func messagesBodyMetadataUpdateRequestJson() (*asset, error) {
	bytes, err := messagesBodyMetadataUpdateRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/update/request.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyMetadataUpdateRequest_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x8e\x83\x40\x0c\x45\x7b\x4e\x81\x86\x2d\x97\xf9\x5b\x6c\xc5\x65\x90\x99\x31\x30\xac\x60\x58\xdb\x08\x45\x51\xee\x1e\x11\x48\x9f\xd6\xef\xd9\xcf\xf7\xa2\x2c\x5d\x8a\xae\x29\xdd\x68\xb6\x6a\x03\xec\xfb\xee\xa7\xa4\xc1\x53\xf0\xdb\x1f\x24\xaa\x42\xc3\xc8\x33\x61\x66\x55\x1a\x58\xd1\xe5\x78\xc3\xcc\x46\x91\x8c\xb0\xad\x91\x8c\x21\xfc\xbf\xb1\x5a\x7b\xca\x7e\xd2\xbc\xb8\xef\xe3\xfe\xd7\x39\x79\x47\x1a\xe0\x60\xf5\xe5\x65\x19\x10\x85\x7a\xab\x7f\x7e\xaf\x50\x75\xed\x09\xf7\x1f\x7e\x26\xac\x4c\x12\xc6\x36\x77\x13\x07\x7b\xc5\x51\x21\x72\x9f\x96\x64\x29\x2f\x8a\x93\xb8\xe2\x51\x3c\x03\x00\x00\xff\xff\x70\x8e\x7d\xb5\xf5\x00\x00\x00")

func messagesBodyMetadataUpdateRequest_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyMetadataUpdateRequest_schemaJson,
		"messages/body/metadata/update/request_schema.json",
	)
}

func messagesBodyMetadataUpdateRequest_schemaJson() (*asset, error) {
	bytes, err := messagesBodyMetadataUpdateRequest_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/metadata/update/request_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyPatchReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x4b\xc3\x40\x10\x85\xef\xf3\x2b\x1e\x14\xc4\x1e\x8c\xf7\x7a\x2a\x2a\x88\x60\x2d\xb6\x78\x11\x71\x27\xc9\xb4\x59\x49\x67\xd7\x9d\x0d\x98\x7f\x2f\x69\x0a\xc6\xe2\x65\xe1\xed\xbc\xf7\xbd\x37\xc3\x6b\xa8\xb8\xec\x5a\x4e\x3d\xd6\x9c\xab\x86\xe8\x49\xcc\x78\x2f\xd8\xf6\x51\x16\x70\xbf\x86\xe3\xdd\x15\x44\x77\x62\x55\xf2\xa5\x18\x18\x8f\x9b\xe7\x15\x22\xf7\x6d\xe0\x1a\xbb\x90\xc0\x53\x64\x6e\x38\xc3\x1b\xf6\xa2\x92\x38\x4b\x8d\xba\x4b\x5e\xf7\x60\x85\x5b\x2f\xb7\xb7\x0f\x0e\x21\x66\x1f\xb4\x20\x9a\xcd\xb0\xa9\x44\x39\xf9\x60\x44\x57\xd8\x88\x66\xe4\x00\xeb\xca\xb1\x2f\xd9\x20\x35\x64\xbf\x3b\xa1\xff\x94\x35\x6c\x28\x45\x14\x71\x18\x2a\xf5\x88\x7c\x91\xaf\x4e\x2c\x0f\xc0\xfb\x6f\x3e\xc4\x56\x16\x17\x5a\x5a\xbc\x99\xbe\x6f\x2e\x8d\xb6\xe2\xd3\x82\xba\xf7\xcb\xa9\x9c\x0f\x5b\xaa\x46\x0e\xfc\x4f\xf2\x2c\xff\x61\x47\xe3\x19\x66\xfa\x3b\x3f\xad\xb2\x18\xd4\x84\x68\x75\xbd\x2c\xe8\x27\x00\x00\xff\xff\xe9\x53\x6e\x25\x88\x01\x00\x00")

func messagesBodyVocabularyPatchReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyPatchReadmeMd,
		"messages/body/vocabulary/patch/README.md",
	)
}

func messagesBodyVocabularyPatchReadmeMd() (*asset, error) {
	bytes, err := messagesBodyVocabularyPatchReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/patch/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyPatchRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x2a\xcb\x4f\x4e\x4c\x2a\xcd\x49\x2c\xaa\xf4\x4c\x51\xb2\x52\x30\xd4\x41\x15\xf4\x4b\xcc\x4d\x55\xb2\x52\x50\x72\x54\x08\x48\x2c\x49\xce\x48\x4d\x51\x08\x83\xcb\x29\xa1\xa9\x0d\x49\x2d\xca\x2d\x56\xb2\x52\x88\xe6\x52\x50\x50\x50\x50\x02\x71\x15\xfc\xf3\x52\xc1\xca\x60\xfc\x90\xf2\x7c\x54\x7e\x46\x51\x6a\xaa\x12\x97\x82\x42\x2c\x57\x2d\x17\x20\x00\x00\xff\xff\xde\x07\xab\x21\x91\x00\x00\x00")

func messagesBodyVocabularyPatchRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyPatchRequestJson,
		"messages/body/vocabulary/patch/request.json",
	)
}

func messagesBodyVocabularyPatchRequestJson() (*asset, error) {
	bytes, err := messagesBodyVocabularyPatchRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/patch/request.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyPatchRequest_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xbf\x4e\xc4\x30\x0c\xc6\xf7\x3c\x85\x15\x18\xef\x6a\x06\xa6\xbe\x01\x0b\x13\x1b\x42\xc8\x6d\x4c\xaf\x07\x69\x8b\x9d\x50\x55\xa8\xef\x8e\x7c\x2d\xff\xae\xb7\x3a\x3f\x7f\xdf\x2f\xfe\x74\x00\xbe\x0d\xbe\x04\x7f\x48\x69\xd0\x12\x71\x1c\xc7\xe2\xd8\x6a\x5d\x50\x5d\xe4\x57\x94\xa0\x8a\x5a\x1f\x38\x12\x46\x56\xa5\x86\x15\xab\x3e\x4c\xf8\xd1\xd7\x54\xe5\x37\x92\x09\xf3\x10\x28\x31\x0a\xbf\x67\xd6\xf4\xbc\xe0\xc5\x51\xfb\x0e\xaf\xfc\xce\x3a\xae\x97\xd9\x77\x51\x89\x68\xaf\xfb\x95\xec\xa5\xc1\x20\xf4\x92\xf6\x37\xb7\x6b\xd9\xba\xf7\x5b\x72\x67\x96\xe6\x0b\xe0\xd3\x34\xb0\x45\x75\x39\x56\x2c\xde\x01\xcc\x67\xf4\x3d\x45\xde\xf2\x9a\xa4\xed\x9a\x4b\xfc\x03\x4b\xd4\xed\x02\x89\xd0\x74\x32\xb1\x3b\x25\xfe\xc3\x5c\x8c\x05\x98\x7f\xc2\xed\x1a\xad\xb0\x69\x3f\x2e\x01\xff\x3e\xb3\x3b\x9f\x9d\x94\x37\xd3\x45\xcc\x01\x3c\xb9\xd9\x7d\x05\x00\x00\xff\xff\xfb\x97\x3c\x3c\xaf\x01\x00\x00")

func messagesBodyVocabularyPatchRequest_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyPatchRequest_schemaJson,
		"messages/body/vocabulary/patch/request_schema.json",
	)
}

func messagesBodyVocabularyPatchRequest_schemaJson() (*asset, error) {
	bytes, err := messagesBodyVocabularyPatchRequest_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/patch/request_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyReadReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x4f\x4b\xf3\x40\x10\xc6\xef\xfb\x29\x1e\x28\xbc\xbc\x3d\xd8\x0f\x50\x4f\x42\x7b\x11\x54\x68\x8a\x17\x11\x77\x92\x8c\xc9\x4a\xb2\xbb\x9d\xd9\xa8\xf9\xf6\x12\x53\xe8\xd2\x0a\x7a\x59\xd8\x79\xfe\xfd\x16\x78\x0c\x15\x95\x43\x47\x32\x62\xc7\x54\x1b\x73\xc7\xaa\xd4\x30\xf6\x63\xe4\x35\xec\x49\x9f\x64\xbb\x32\x66\xc3\x5a\x89\x2b\x59\x41\xb8\x2d\x1e\xee\x11\x69\xec\x02\xd5\x78\x0d\x02\xca\x0b\x53\x4b\x09\x4e\xd1\xb0\x67\xa1\xc4\x35\xea\x41\x9c\x6f\x40\xb0\xbb\xed\xcd\xc6\x22\xc4\xe4\x82\x5f\x19\xb3\x58\xa0\xa8\xd8\x93\xb8\xa0\xc6\x5c\xa1\x60\x9f\x50\x8e\xd0\xa1\x9c\xd7\x44\xf1\xd1\xb2\x07\x75\x1d\xf6\x2c\xbd\x82\x84\x8f\x93\x8d\x7b\x67\x9f\x0f\x4f\x92\xf0\x61\x70\xc2\xf5\x5c\xbe\xe3\xc3\xc0\x9a\xa6\xea\xed\x27\xf5\xb1\xe3\xf5\x3f\x5f\x6a\xbc\xce\xdf\x27\x2b\xb3\x6d\xf5\xa6\xc1\xdb\xe7\xff\xf9\x77\x39\x51\x55\x2d\xf7\xf4\x43\xf2\x2c\xff\xa2\xdf\xc6\xb3\x9a\xfc\xba\x3c\x52\x69\x0c\x5e\xf9\x77\xac\xd9\x77\x2a\xcc\xfe\x7f\x04\x9b\x13\x17\x64\x97\xe7\xa5\xf9\x0a\x00\x00\xff\xff\x8e\x74\x2e\x09\x16\x02\x00\x00")

func messagesBodyVocabularyReadReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyReadReadmeMd,
		"messages/body/vocabulary/read/README.md",
	)
}

func messagesBodyVocabularyReadReadmeMd() (*asset, error) {
	bytes, err := messagesBodyVocabularyReadReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/read/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyReadRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x2a\xcb\x4f\x4e\x4c\x2a\xcd\x49\x2c\xaa\xf4\x4c\x51\xb2\x52\x30\xe4\xaa\xe5\x02\x04\x00\x00\xff\xff\xbe\x10\x07\xc5\x18\x00\x00\x00")

func messagesBodyVocabularyReadRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyReadRequestJson,
		"messages/body/vocabulary/read/request.json",
	)
}

func messagesBodyVocabularyReadRequestJson() (*asset, error) {
	bytes, err := messagesBodyVocabularyReadRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/read/request.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyReadRequest_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x4d\x8e\xc2\x30\x0c\x46\xf7\x39\x85\x95\x99\xe5\x34\x9e\x05\xab\xde\x80\x33\x20\x84\xd2\xc4\xf4\x07\xda\x14\x3b\xa1\xaa\x50\xef\x8e\x42\x8b\x10\xdb\xe4\x7d\x7e\xef\xa1\x00\x74\xeb\x75\x09\xba\x89\x71\x94\x12\x71\x9a\x26\xd3\xb5\xe2\x8c\x75\x26\x5d\x90\xbd\x08\x8a\x6b\xa8\xb7\xd8\x93\x88\xad\x49\xb0\x0a\x7e\xc6\x7b\x70\xb6\x4a\x57\xcb\x33\x32\x59\x8f\x4c\xb7\x44\x12\x4f\x2b\x6c\x3a\x09\x03\xfe\xe8\xbf\x6c\xf8\x5d\xdf\xde\x9a\x12\x31\xff\x16\x1b\x19\xb8\x46\xcf\xf6\x1c\x8b\xff\xdd\xa6\xda\x76\x1f\xc5\x3e\x37\xe6\x5a\x00\x1d\xe7\x91\xf2\xa9\x21\xf5\x15\xb1\x56\x00\xcb\x8b\xce\x01\x2d\x53\x26\x0f\x2b\xf9\xb5\x57\x00\x47\xb5\xa8\x67\x00\x00\x00\xff\xff\x2d\x7c\x0d\x49\xf3\x00\x00\x00")

func messagesBodyVocabularyReadRequest_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyReadRequest_schemaJson,
		"messages/body/vocabulary/read/request_schema.json",
	)
}

func messagesBodyVocabularyReadRequest_schemaJson() (*asset, error) {
	bytes, err := messagesBodyVocabularyReadRequest_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/read/request_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyReadResponseJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x2a\xcb\x4f\x4e\x4c\x2a\xcd\x49\x2c\xaa\xf4\x4c\x51\xb2\x52\x30\xd4\x41\x15\x0c\x49\x2d\xca\x2d\x56\xb2\x52\x88\xe6\x52\x00\x03\x25\x90\x80\x82\x7f\x5e\xaa\x92\x0e\x8a\x48\x48\x79\x3e\xba\x48\x46\x51\x6a\xaa\x12\x97\x82\x42\x2c\x57\x2d\x17\x20\x00\x00\xff\xff\xbc\xfc\xd3\x29\x6b\x00\x00\x00")

func messagesBodyVocabularyReadResponseJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyReadResponseJson,
		"messages/body/vocabulary/read/response.json",
	)
}

func messagesBodyVocabularyReadResponseJson() (*asset, error) {
	bytes, err := messagesBodyVocabularyReadResponseJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/read/response.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesBodyVocabularyReadResponse_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x3e\xc5\xc8\xb0\x6c\x33\x2c\x58\xe5\x06\xec\xd9\x21\x84\x26\xf1\x90\xa6\x10\x3b\xcc\xd8\x44\x16\xca\xdd\x91\xeb\x00\xa5\xdd\x7e\xbf\xf9\xff\xf9\xcb\x00\xd8\xd1\xd9\x16\xec\x21\xc6\x59\x5b\xc4\x65\x59\x9a\xe3\xa8\x7d\x43\x7d\x93\xde\x50\x9c\x2a\x6a\x7f\xe0\x89\x70\x62\x55\x1a\x58\xb1\x0b\x2e\xe3\x67\xe8\xa9\x4b\xef\x24\x19\x85\xc9\xa1\xb0\xce\xc1\x2b\xbf\x54\xba\x39\x6a\xf0\x78\x63\x77\x65\xe2\xb6\x66\x3f\x3b\x2d\x62\x79\xdd\x6f\x64\x90\x01\x9d\xd0\x6b\xdc\xdf\xdd\x6f\x5b\xdb\xdd\xdf\xc6\x43\x91\x2c\xba\x00\x36\xe6\x99\x4b\x95\x4f\x53\xc7\x62\x0d\xc0\x7a\x41\x3f\xb2\x4c\x7a\x7d\x40\x22\x94\x4f\xcd\xe5\xdb\x91\xcf\x98\x33\x4a\xa3\x8c\x7e\xb0\xa7\x78\xfd\x2d\x17\xfe\x48\xa3\x70\xd1\x78\xaa\x05\xff\xe4\x76\x97\x59\x55\x30\x00\xcf\x66\x35\xdf\x01\x00\x00\xff\xff\xbf\x56\x8b\x88\x68\x01\x00\x00")

func messagesBodyVocabularyReadResponse_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesBodyVocabularyReadResponse_schemaJson,
		"messages/body/vocabulary/read/response_schema.json",
	)
}

func messagesBodyVocabularyReadResponse_schemaJson() (*asset, error) {
	bytes, err := messagesBodyVocabularyReadResponse_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/body/vocabulary/read/response_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesHeaderHeaderJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4d\x6b\xf3\x30\x0c\x80\xef\xf9\x15\xc2\xe7\xd7\xe0\x84\x7e\xe6\xf6\x92\x95\x6d\x87\xed\xd0\xe5\x36\x76\x50\x63\xad\x35\x24\x76\x26\xbb\x63\x65\xf4\xbf\x0f\xc7\x2d\xed\xd6\x1e\x0a\x21\x60\x3f\x96\xf4\x48\xfa\xce\x00\x44\x47\xde\xe3\x9a\x1e\xb5\x28\x41\xf8\xc0\xc6\xae\xc5\xbf\x08\x1a\xc7\x4c\x2d\x06\xe3\xec\x25\x3c\x44\x55\x2d\x7a\x1f\x59\xe5\xba\x0e\xad\xfe\x05\xeb\x5d\x4f\x91\x3d\x51\x40\x8d\x01\x2b\x26\x0c\x94\x9e\x30\x85\x2d\xdb\xff\x5a\x33\xa5\x04\x57\x92\xd7\xa6\x33\x76\x1d\x69\x14\x05\x10\xfd\x76\xd5\x1a\xbf\x21\x5d\x9b\x8e\x7c\xc0\xae\x8f\x91\x85\x52\x23\xa9\x66\x52\xe5\x75\xae\x4a\x15\x3f\x39\xfc\x87\x64\x00\x82\xbe\x7a\xc3\x43\x1f\x37\xc6\x65\x00\xfb\x73\x91\x17\xfa\xd8\x92\x6d\xe8\x64\xe2\x4f\x37\x62\x3c\x55\x34\x1e\x69\x92\x5a\xd3\x4a\x8e\xa6\x38\x97\xab\x49\x31\x97\x05\xe6\xd4\x14\xef\xb3\xf1\xb4\x98\x1c\x55\x7a\xe7\x4d\x14\x11\x25\xe4\x87\xab\xe0\x02\xb6\xf1\xfc\xb7\xea\x83\xf1\xc1\xf1\x4e\x94\xf0\x3a\xbc\x4c\xa5\x23\xc7\x66\x63\xec\xe5\xc6\xce\xe1\xf5\xc9\xa6\x82\x37\x0f\x01\x60\x9f\x01\xbc\x0d\x52\x9f\xc4\x3e\x89\x8b\xb4\x24\x62\x76\x5c\x39\x3d\xcc\xe0\x7e\xf1\xbc\x58\x2e\x95\xca\xcf\xd8\x1d\xf9\x86\x4d\x7f\x68\xf7\xa8\x91\xed\xb3\x9f\x00\x00\x00\xff\xff\xe4\xdd\x0f\x3e\x77\x02\x00\x00")

func messagesHeaderHeaderJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesHeaderHeaderJson,
		"messages/header/header.json",
	)
}

func messagesHeaderHeaderJson() (*asset, error) {
	bytes, err := messagesHeaderHeaderJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/header/header.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesHeaderHeader_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcf\xaf\xd2\x40\x10\xbe\xf3\x57\x6c\xd6\x77\x04\xd6\x83\x27\x6e\x06\x4c\xf4\x60\x62\x14\xbd\x18\x63\x86\xee\x40\x17\xbb\xbb\x75\x66\xfa\x90\x18\xfe\x77\x53\x28\xef\x95\xb6\x94\x3e\x12\x2f\x94\xce\x37\xfb\xed\xd7\x6f\x7e\xfc\x1d\x29\xa5\x9d\xd5\x33\xa5\x53\x91\x9c\x67\xc6\xec\x76\xbb\xe9\xd6\x71\x32\x85\x64\x5a\xfc\x32\x64\x99\x0d\x27\x29\x7a\x30\x1e\x99\x61\x83\x6c\x52\x04\x8b\x54\x3d\x7e\x9e\xd0\xe9\x96\x63\x30\xaf\xf4\xb8\xa4\x7c\x38\xc5\xce\xbc\x33\x63\x4a\x74\x52\x65\x46\xda\x18\x4b\xb0\x96\xc9\xeb\x37\x15\x77\x75\xce\xe2\xda\x05\x27\x2e\x06\xd6\x33\x55\xaa\x53\x4a\xc7\xd5\x16\x13\x79\x7a\x57\x4a\xcb\x3e\xc7\x92\xbb\x42\xc6\xe7\x78\x4e\x31\x47\x12\x87\x5c\xcb\x56\x4a\x57\xc2\x3f\xd8\x8b\x70\x8d\x88\x85\x5c\xd8\xe8\x27\xe8\x30\x7e\x3e\x9c\x44\x22\xcc\xa0\x14\x75\x1f\x41\x75\xfb\x3c\x03\xe6\xe6\x79\x0c\x85\xd7\x33\xf5\xbd\x16\x53\x4a\xcf\xa3\xf7\x10\xac\x1e\x5f\x86\xdf\x3d\x62\x90\x66\x70\x11\x93\xc2\x97\xf1\x5a\xf8\x47\x9f\x8e\xe5\x49\xf2\x00\x19\x1f\x51\xc0\x82\xc0\x9c\x10\x04\x9b\x17\x9f\xd1\xaf\xb9\xed\x41\x17\x98\xe1\x75\xf4\x33\x42\xeb\x2b\xbf\xc5\x04\x56\x45\x06\xb4\xef\x47\x3f\x81\x24\xe9\xed\xaf\x26\x94\x82\xc2\x5b\x6b\x09\xdb\xf6\xbf\xa0\x7c\x4b\xe7\x5d\xd8\x5c\x65\x68\xb4\xa2\xea\x69\xc7\x13\x56\xac\x32\xc7\x29\xda\xa5\xf3\xc8\x02\x3e\x6f\xe5\xb4\xf5\x8d\x9b\xf8\x3a\x92\x87\x72\x34\x74\x59\x83\x89\x38\x8f\xfa\x22\xe7\xd0\xb0\x0f\xff\xe4\x8e\x8e\xbd\xfc\x9f\xef\x1d\x75\xfd\xef\xb0\xf5\x0b\xfe\x2e\x30\x24\xad\x8e\xbc\xd7\x57\xee\xe6\x3b\x62\x0f\x84\xeb\x81\xab\xae\xbc\x9e\xab\x95\x66\x6a\x5b\xc9\x14\x85\xb3\xfd\x16\xe7\x91\x8f\xb9\x7d\xbe\xba\x20\xb8\x41\xea\x27\x92\x28\x90\xbd\x9c\x65\xa8\xf3\xef\x1d\x4b\xa4\xfd\x35\xe3\x81\x08\xf6\x97\xbe\x3b\x41\xdf\x61\x79\x4f\xa9\xfa\x8b\x55\x6a\x81\x24\x75\xa1\xbd\x99\x1b\xd4\xcd\xf9\xec\x34\xec\x99\xae\x7b\xda\xef\xe4\x94\x9e\x41\xb9\x3d\x2a\x43\x86\xe5\xb2\x68\x43\x4a\xf8\x88\xc4\xed\x16\x1b\xb4\xce\x90\x28\xd2\x3c\xda\xab\x13\x77\xf3\xf0\x02\x39\x21\x97\x77\xf4\xf8\x75\x8e\x51\xfd\x59\xfe\x1e\x46\x87\xd1\xbf\x00\x00\x00\xff\xff\xe0\xe3\x41\x68\x7e\x08\x00\x00")

func messagesHeaderHeader_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesHeaderHeader_schemaJson,
		"messages/header/header_schema.json",
	)
}

func messagesHeaderHeader_schemaJson() (*asset, error) {
	bytes, err := messagesHeaderHeader_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/header/header_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesMessageJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4b\x73\xdb\xb6\x13\xbf\xfb\x53\x70\x78\x0e\x62\x80\xa2\xf8\xf0\x2d\x7f\xc5\x89\xf3\xaf\x9d\x7a\x6c\xa5\x97\x8c\x0f\x20\xb0\x94\xd0\x92\x84\x0a\x40\x4e\xdd\x8e\xbe\x7b\x87\x2f\x9b\x0f\x08\x96\x7b\xe8\x74\xc6\x63\xcb\xd8\xdf\x02\xfb\xfc\xed\xea\xaf\x33\xcf\xf3\x4b\xd0\x9a\x6e\xe0\x0a\x28\x07\xe5\x5f\x78\xf5\xe1\xcb\xf1\x17\xee\x5f\x78\xbe\x36\x4a\x54\x1b\xff\x5d\x2b\x62\x52\x29\x28\xa8\x11\xb2\xb2\x89\x3b\xcd\x55\x41\xb5\xae\xa5\x2b\x59\x96\xb4\xe2\x13\xf1\xfa\x69\x07\xb5\xf4\x06\x0c\xe5\xd4\xd0\x95\x02\x6a\xa0\x07\x29\x30\x7b\x55\x7d\xe0\x5c\x41\x7b\x89\xf5\x89\xb5\x28\x45\xb5\xd1\xcf\x46\x7b\x9e\xbf\xdb\x67\x85\xd0\x5b\xe0\x6b\x51\x82\x36\xb4\xdc\xd5\xda\x01\xc6\x21\xc2\x09\xc2\x64\x4d\xf0\x05\xae\x7f\x50\xf3\xbb\xbb\xd0\xf3\x7c\xf8\x63\x27\x54\xe3\xd3\x89\x9a\x8d\xe2\x61\x6c\xd0\x3d\xfc\xbe\x87\x8a\xc1\xd0\x22\xfd\x72\xe6\x47\x94\x27\x24\x0d\x39\xe2\x84\x63\x14\x2e\x92\x14\xd1\x28\xe4\x88\xc5\x0b\x1e\x47\x24\x8c\x16\x2c\x7d\x31\x69\x27\xb5\xa8\x0d\xf2\x2f\x3c\xf2\x7c\x68\xa4\xa1\x45\x7d\x62\x7b\xff\x4a\x68\x23\xd5\x93\x7f\xe1\x7d\xef\xf0\xbd\x19\x35\x86\xb2\xad\xa8\x6c\x19\x1d\x8a\x8f\xc5\xbc\x7d\xfc\x0d\xa1\xf1\xbc\x43\xf3\xf7\xa1\x33\xf1\x11\x94\x6e\x9d\xf1\xfb\x34\x82\x52\x52\xad\x24\x6f\x62\xf3\xf9\xf2\xeb\xe5\xdd\x1d\xc6\x64\x24\xfd\x08\x9a\x29\xb1\xeb\xc2\xd0\x9b\x74\xd6\x79\xde\xfb\xfd\x3f\xc9\x9f\x5e\x4a\x57\x66\xbf\x02\x33\xdf\xf6\xa2\xf1\x74\x19\x25\x18\x12\xc0\x28\x48\xe8\x12\x85\x59\x80\x51\x1a\x26\x80\x72\x8e\x39\x4e\xe2\x84\x00\xce\xfa\x27\x5b\xcd\xb5\x30\x05\xcc\x8b\xae\x15\xde\x82\xd2\xb2\xba\x93\x0d\xc2\x12\xe5\x5d\x23\x1f\x14\xc0\xe0\xb4\x37\x29\x88\x13\x42\x68\xc8\x50\xca\xb2\x25\x0a\x21\xe2\x88\xe2\x28\x45\x4b\x46\xd2\x20\x49\x72\x0a\xcb\x64\x10\xf6\x67\xfd\x2f\x1c\x2a\x23\x72\xd1\xf4\xe9\xf7\x81\xdc\x1b\xbd\x66\xd5\xf8\x85\x16\xfb\xb9\x53\x0e\x85\xae\x41\xc9\x08\x77\x18\xfc\xf7\x60\xb1\xf0\xb2\x32\x75\xf0\x4a\xa8\xcc\xcc\x44\xf2\x8a\xee\x87\x3c\x17\x85\xa0\x5d\xaa\xdf\xa6\xfb\x59\x3c\x42\xf5\x95\x96\xc7\x3c\xec\x60\xab\xca\x2d\xbf\x7f\x45\xbe\x86\x02\x76\x5b\x59\xc1\xd7\x7d\x99\x35\x59\x70\x80\x6f\xa8\x28\xdc\x88\x9f\xd5\x86\x56\x42\x37\x2e\x7f\xab\x84\x99\x54\x4d\x5d\x73\x13\xc4\x73\x05\x25\x19\xc4\x39\x89\x10\x86\x18\xa3\x30\x22\x39\xa2\x01\xcf\x10\x4f\x79\xcc\xa2\x90\x26\x39\x89\x27\x29\x9e\xdd\xe5\x08\xd7\x04\x3d\xb3\x6b\x22\xff\xbf\xd0\xac\xa1\x15\x32\xab\xaa\x21\xcc\xf9\xe0\x04\xdb\x57\x9f\x13\x34\xe7\xaa\xa3\xc5\xfa\xf2\xf9\x30\xe0\x33\xd5\xb6\x31\xb1\x12\x56\xdb\xef\x76\x02\x1a\x41\xee\xc4\x66\x6b\xb4\x9d\x0e\x54\x23\xbb\x37\xd4\xd8\x9a\x62\x66\xf6\xc3\xbb\xa9\xea\x95\x2c\xf8\xac\xdf\x9d\x7a\x85\x60\xdd\xbc\x19\xaa\x4c\x0a\xab\x03\xb9\x6b\xa0\x03\x8d\x68\xc7\x12\xe9\x83\xd5\x0c\xca\x58\x9b\x1b\x87\x15\x2d\xc6\x9e\xeb\x4e\x38\x0c\x9d\xfb\x6d\x57\x12\xeb\xd5\xc2\x9a\x1f\x4e\x0d\x3c\x53\x63\x80\x71\x80\x08\x46\x38\x18\x4c\xb4\xe5\x70\x4d\xe8\x34\x26\xdc\x68\x7b\xf2\x27\x78\xfa\x21\x15\x1f\x06\x60\x64\xfe\x18\xbd\xa2\x06\x36\xe3\xc9\xed\x40\xdf\x81\x96\x7b\xc5\x60\x1c\xb8\x4e\xd8\x7b\x33\x3e\xb5\x8e\x8e\x41\x1c\xc4\x09\x83\x62\x00\x9a\xa7\xcc\xef\x57\xc2\x13\x62\x73\x57\x43\x81\xff\xa7\x6c\x1a\x72\xf1\xf1\xe9\xee\x60\xc5\x13\x18\xf1\x54\x36\x7c\x95\x09\x4f\x65\xc1\x37\x72\xdd\xad\x02\x0d\xea\xb1\xb9\xf5\xf2\x71\x4c\x57\xc3\x15\x67\x0a\x73\xa4\x67\x86\xb5\x64\x69\x86\xf9\x08\x66\x3c\x3b\x1d\x36\x7f\x12\xc7\x72\x95\x8b\x02\xfa\x79\x09\x64\x89\x59\x48\x33\x84\x17\xf5\xbc\x84\x25\x45\x49\x1c\x04\x28\xce\xb3\xc5\x22\x4a\xb3\x18\x8f\xe6\x65\xa3\x6b\xa5\xbd\x09\xe6\x68\x12\x1b\xe9\xbd\xf8\x73\xea\x6b\x7d\x7c\x4d\x33\xb0\x6f\x06\x8d\xb8\x26\xab\xf6\xdb\x10\x9f\x96\xd8\x9b\xd9\xca\xce\x57\xe3\xc2\xa8\xdf\x7c\x1e\x61\xa3\xe7\xdc\xc3\xcb\x32\x86\xa6\xcb\x99\x63\x84\x9d\xa0\x6d\x1f\x64\x96\x5d\xf7\x94\x61\x76\xfa\x38\x73\x6d\xb9\xd6\xa1\x66\xb1\xc8\x35\xd8\x4e\x1d\x6d\x13\x3b\x8e\xe6\x6e\xb5\x05\xf6\x9b\xde\x97\xee\x51\xcb\x3a\x54\xdf\x11\x3c\x0f\x16\x59\x18\x65\x28\xca\xa2\x10\x85\x34\xc4\x28\x09\x83\x1c\x2d\x29\x5f\x44\x8b\x2c\x8b\x80\x90\xe9\x3e\xd0\xdf\x71\x64\x60\xf7\xe2\x29\x1d\xbc\xba\x2a\xd4\x5e\x7c\x92\xaa\xa4\x3d\x3b\x1c\xe9\x8c\x95\x2c\xfb\xef\xc4\xd7\xf0\xe8\xea\xa1\x2b\xaa\x6f\x44\xd9\xd7\xbd\x51\x7b\xb0\x34\xd9\x8d\xe4\x75\x19\x70\x77\xe0\xfe\x41\xcf\x1d\xeb\x3a\x97\xff\xb7\x6d\x5e\x4e\xde\xf2\x1a\x76\xd3\x36\x7a\x71\xb1\xb8\xc5\xbf\x37\xb0\xb9\x1d\x7f\xa4\x1a\x4e\x66\x75\x77\x5c\xbe\xed\x0a\x49\x79\xdd\x2a\x7b\x6d\x71\xf6\xde\x48\x45\x37\x70\x54\x7e\x4d\xb5\xf9\x28\x7f\x54\xf5\x25\xff\x22\x9f\xae\x81\x6d\x2b\xc1\x68\xf1\xc1\x18\x25\xb2\xbd\x81\x29\x69\xbc\x9a\xdc\xce\xb3\x6b\xc9\xfa\x6d\xc3\xdf\x1a\xb3\xd3\x17\xe7\xe7\x46\xca\x42\xbf\x17\x60\xf2\xf7\x52\x6d\xce\xb7\xa6\x2c\xce\x55\xce\x16\x69\x12\xcd\x46\x50\x7b\xcb\x6d\x41\x4d\x2e\x55\x39\x0d\x80\x1e\x8b\x7b\x72\xc8\x83\x74\x91\x2e\x31\x41\x41\x16\xf0\x7a\x5c\x32\x94\x92\x34\x46\x98\x53\xba\x8c\x19\xcb\xa2\x60\x4c\x0e\xd3\x8b\x5c\xcb\xcd\x04\x6a\xdd\x6f\x26\x98\x95\xd4\x56\x92\x3c\x8c\x17\x83\xb3\xfa\xd3\xe1\xec\xef\x00\x00\x00\xff\xff\xf7\xea\x92\x2a\xd7\x14\x00\x00")

func messagesMessageJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesMessageJson,
		"messages/message.json",
	)
}

func messagesMessageJson() (*asset, error) {
	bytes, err := messagesMessageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/message.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _messagesMessage_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\xc1\x4e\xc4\x20\x10\x86\xef\x7d\x8a\x09\x7a\xdc\x65\x3c\x78\xe2\xe8\xc9\xb7\xd8\x20\x4c\x17\x6a\xb6\x90\x19\x4c\xb3\x31\x7d\x77\x43\xa1\xd1\x9e\xd4\x43\x53\xf2\xc3\xfc\xdf\x37\x9f\x03\x80\x8a\x5e\x19\x50\xa1\x94\x2c\x06\x71\x59\x16\x3d\x45\x71\xda\x3a\xfd\xf1\x8e\xec\x45\x50\x5c\xa0\x9b\xc5\x1b\x89\xd8\x2b\xc9\x7e\xb8\xb4\x5c\x4f\x92\x66\x7c\x50\xa7\x5a\xf6\xd8\xb2\xbd\xd1\x20\xd6\xdb\x73\x7f\x99\xf8\x8a\x9e\xed\x58\xce\x4f\xcf\xbd\xb5\xcf\x95\x7b\xa6\x3a\x94\xde\x26\x72\xa5\x65\x99\x53\x26\x2e\x91\x44\x81\x81\xea\x0a\xa0\x3a\xfb\x95\xac\x27\xfe\xce\x2b\x9a\x69\xfc\xef\x26\x61\xab\xe9\xbf\xe3\x3e\xe8\x69\x8c\x73\x2c\x31\xcd\x82\x5d\x6b\x43\xad\xa7\x83\xc9\x4b\xf2\xf7\x9f\x1e\xbb\x09\xfc\x4d\x85\x49\xc8\xb2\x0b\x97\x86\xf8\x15\x3e\xd4\x6f\x1d\xbe\x02\x00\x00\xff\xff\x61\xa9\x8f\x32\xba\x01\x00\x00")

func messagesMessage_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_messagesMessage_schemaJson,
		"messages/message_schema.json",
	)
}

func messagesMessage_schemaJson() (*asset, error) {
	bytes, err := messagesMessage_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/message_schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/enumeration.json":                           schemasEnumerationJson,
	"schemas/intellectual_asset.json":                    schemasIntellectual_assetJson,
	"schemas/material_asset.json":                        schemasMaterial_assetJson,
	"schemas/research_object.json":                       schemasResearch_objectJson,
	"schemas/types.json":                                 schemasTypesJson,
	"messages/body/metadata/create/README.md":            messagesBodyMetadataCreateReadmeMd,
	"messages/body/metadata/create/request.json":         messagesBodyMetadataCreateRequestJson,
	"messages/body/metadata/create/request_schema.json":  messagesBodyMetadataCreateRequest_schemaJson,
	"messages/body/metadata/delete/README.md":            messagesBodyMetadataDeleteReadmeMd,
	"messages/body/metadata/delete/request.json":         messagesBodyMetadataDeleteRequestJson,
	"messages/body/metadata/delete/request_schema.json":  messagesBodyMetadataDeleteRequest_schemaJson,
	"messages/body/metadata/read/README.md":              messagesBodyMetadataReadReadmeMd,
	"messages/body/metadata/read/request.json":           messagesBodyMetadataReadRequestJson,
	"messages/body/metadata/read/request_schema.json":    messagesBodyMetadataReadRequest_schemaJson,
	"messages/body/metadata/read/response.json":          messagesBodyMetadataReadResponseJson,
	"messages/body/metadata/read/response_schema.json":   messagesBodyMetadataReadResponse_schemaJson,
	"messages/body/metadata/update/README.md":            messagesBodyMetadataUpdateReadmeMd,
	"messages/body/metadata/update/request.json":         messagesBodyMetadataUpdateRequestJson,
	"messages/body/metadata/update/request_schema.json":  messagesBodyMetadataUpdateRequest_schemaJson,
	"messages/body/vocabulary/patch/README.md":           messagesBodyVocabularyPatchReadmeMd,
	"messages/body/vocabulary/patch/request.json":        messagesBodyVocabularyPatchRequestJson,
	"messages/body/vocabulary/patch/request_schema.json": messagesBodyVocabularyPatchRequest_schemaJson,
	"messages/body/vocabulary/read/README.md":            messagesBodyVocabularyReadReadmeMd,
	"messages/body/vocabulary/read/request.json":         messagesBodyVocabularyReadRequestJson,
	"messages/body/vocabulary/read/request_schema.json":  messagesBodyVocabularyReadRequest_schemaJson,
	"messages/body/vocabulary/read/response.json":        messagesBodyVocabularyReadResponseJson,
	"messages/body/vocabulary/read/response_schema.json": messagesBodyVocabularyReadResponse_schemaJson,
	"messages/header/header.json":                        messagesHeaderHeaderJson,
	"messages/header/header_schema.json":                 messagesHeaderHeader_schemaJson,
	"messages/message.json":                              messagesMessageJson,
	"messages/message_schema.json":                       messagesMessage_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"messages": &bintree{nil, map[string]*bintree{
		"body": &bintree{nil, map[string]*bintree{
			"metadata": &bintree{nil, map[string]*bintree{
				"create": &bintree{nil, map[string]*bintree{
					"README.md":           &bintree{messagesBodyMetadataCreateReadmeMd, map[string]*bintree{}},
					"request.json":        &bintree{messagesBodyMetadataCreateRequestJson, map[string]*bintree{}},
					"request_schema.json": &bintree{messagesBodyMetadataCreateRequest_schemaJson, map[string]*bintree{}},
				}},
				"delete": &bintree{nil, map[string]*bintree{
					"README.md":           &bintree{messagesBodyMetadataDeleteReadmeMd, map[string]*bintree{}},
					"request.json":        &bintree{messagesBodyMetadataDeleteRequestJson, map[string]*bintree{}},
					"request_schema.json": &bintree{messagesBodyMetadataDeleteRequest_schemaJson, map[string]*bintree{}},
				}},
				"read": &bintree{nil, map[string]*bintree{
					"README.md":            &bintree{messagesBodyMetadataReadReadmeMd, map[string]*bintree{}},
					"request.json":         &bintree{messagesBodyMetadataReadRequestJson, map[string]*bintree{}},
					"request_schema.json":  &bintree{messagesBodyMetadataReadRequest_schemaJson, map[string]*bintree{}},
					"response.json":        &bintree{messagesBodyMetadataReadResponseJson, map[string]*bintree{}},
					"response_schema.json": &bintree{messagesBodyMetadataReadResponse_schemaJson, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"README.md":           &bintree{messagesBodyMetadataUpdateReadmeMd, map[string]*bintree{}},
					"request.json":        &bintree{messagesBodyMetadataUpdateRequestJson, map[string]*bintree{}},
					"request_schema.json": &bintree{messagesBodyMetadataUpdateRequest_schemaJson, map[string]*bintree{}},
				}},
			}},
			"vocabulary": &bintree{nil, map[string]*bintree{
				"patch": &bintree{nil, map[string]*bintree{
					"README.md":           &bintree{messagesBodyVocabularyPatchReadmeMd, map[string]*bintree{}},
					"request.json":        &bintree{messagesBodyVocabularyPatchRequestJson, map[string]*bintree{}},
					"request_schema.json": &bintree{messagesBodyVocabularyPatchRequest_schemaJson, map[string]*bintree{}},
				}},
				"read": &bintree{nil, map[string]*bintree{
					"README.md":            &bintree{messagesBodyVocabularyReadReadmeMd, map[string]*bintree{}},
					"request.json":         &bintree{messagesBodyVocabularyReadRequestJson, map[string]*bintree{}},
					"request_schema.json":  &bintree{messagesBodyVocabularyReadRequest_schemaJson, map[string]*bintree{}},
					"response.json":        &bintree{messagesBodyVocabularyReadResponseJson, map[string]*bintree{}},
					"response_schema.json": &bintree{messagesBodyVocabularyReadResponse_schemaJson, map[string]*bintree{}},
				}},
			}},
		}},
		"header": &bintree{nil, map[string]*bintree{
			"header.json":        &bintree{messagesHeaderHeaderJson, map[string]*bintree{}},
			"header_schema.json": &bintree{messagesHeaderHeader_schemaJson, map[string]*bintree{}},
		}},
		"message.json":        &bintree{messagesMessageJson, map[string]*bintree{}},
		"message_schema.json": &bintree{messagesMessage_schemaJson, map[string]*bintree{}},
	}},
	"schemas": &bintree{nil, map[string]*bintree{
		"enumeration.json":        &bintree{schemasEnumerationJson, map[string]*bintree{}},
		"intellectual_asset.json": &bintree{schemasIntellectual_assetJson, map[string]*bintree{}},
		"material_asset.json":     &bintree{schemasMaterial_assetJson, map[string]*bintree{}},
		"research_object.json":    &bintree{schemasResearch_objectJson, map[string]*bintree{}},
		"types.json":              &bintree{schemasTypesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
